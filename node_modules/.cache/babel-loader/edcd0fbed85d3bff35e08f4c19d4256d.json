{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/chess/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.findSquares = location => {\n      let mod = location % 8;\n      let current = 0;\n      let possibleMoves = [];\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n\n      switch (this.state.boardState[location]) {\n        case \"whitePawn\":\n          current = location - 8;\n\n          if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n            possibleMoves.push(current);\n\n            if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\")) {\n              possibleMoves.push(current - 8);\n            }\n          }\n\n          for (let i = 0; i < 2; i++) {\n            current = location + diagonalPieceMovements[i];\n            let counter = mod;\n            diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"black\") && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackPawn\":\n          current = location + 8;\n\n          if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n            possibleMoves.push(current);\n\n            if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\")) {\n              possibleMoves.push(current + 8);\n            }\n          }\n\n          for (let i = 2; i < 4; i++) {\n            current = location + diagonalPieceMovements[i];\n            let counter = mod;\n            diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"black\") && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteRook\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"white\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"white\")) break;\n                if (this.state.boardState[current - movement].includes(\"black\")) break;\n              }\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackRook\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"black\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"black\")) break;\n                if (this.state.boardState[current - movement].includes(\"white\")) break;\n              }\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteQueen\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"white\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"white\")) break;\n                if (this.state.boardState[current - movement].includes(\"black\")) break;\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackQueen\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"black\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"black\")) break;\n                if (this.state.boardState[current - movement].includes(\"white\")) break;\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteKing\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackKing\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        default:\n      }\n    };\n\n    this.clearMove = () => {\n      this.setState({\n        possibleMoves: new Array(64).fill(false)\n      });\n    };\n\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"whiteBishop\", \"blackBishop\", \"\", \"\", \"\", \"whiteBishop\", \"blackQueen\", \"whiteBishop\", \"blackBishop\", \"\", \"\", \"blackKing\", \"\", \"\", \"whiteKing\", \"\", \"blackBishop\", \"\", \"\", \"\", \"blackBishop\", \"blackPawn\", \"\", \"\", \"\", \"whiteKnight\", \"\", \"\", \"whiteBishop\", \"\", \"\", \"blackQueen\", \"blackRook\", \"\", \"blackRook\", \"\", \"blackRook\", \"\", \"\", \"blackPawn\", \"\", \"whitePawn\", \"\", \"whiteKing\", \"\", \"whiteKing\", \"\", \"\", \"whitePawn\", \"\", \"\", \"\", \"whitePawn\", \"\", \"whitePawn\", \"whitePawn\", \"blackKnight\", \"\", \"blackBishop\", \"\", \"blackBishop\", \"whiteKing\", \"whiteQueen\", \"blackBishop\"],\n      possibleMoves: new Array(64).fill(false)\n    };\n  }\n\n  render() {\n    let board = this.state.colorGrid.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        index: index,\n        value: value,\n        key: index,\n        colorGrid: this.state.colorGrid,\n        boardState: this.state.boardState,\n        possibleMoves: this.state.possibleMoves,\n        findSquares: this.findSquares,\n        clearMove: this.clearMove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }\n    }, \"CHESS\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolderTwo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 13\n      }\n    }, board))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/chess/src/App.js"],"names":["React","Component","Square","App","constructor","props","findSquares","location","mod","current","possibleMoves","verticalPieceMovements","horizontalPieceMovements","diagonalPieceMovements","state","boardState","includes","push","Math","floor","i","counter","setState","map","value","index","console","log","movement","clearMove","Array","fill","colorGrid","render","board"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"whiteBishop\", \"blackBishop\", \"\", \"\", \"\", \"whiteBishop\", \"blackQueen\", \"whiteBishop\", \"blackBishop\", \"\", \"\", \"blackKing\", \"\", \"\", \"whiteKing\", \"\", \"blackBishop\", \"\", \"\", \"\", \"blackBishop\", \"blackPawn\", \"\", \"\", \"\", \"whiteKnight\", \"\", \"\", \"whiteBishop\", \"\", \"\", \"blackQueen\", \"blackRook\", \"\", \"blackRook\", \"\", \"blackRook\", \"\", \"\", \"blackPawn\", \"\", \"whitePawn\", \"\", \"whiteKing\", \"\", \"whiteKing\", \"\", \"\", \"whitePawn\", \"\", \"\", \"\", \"whitePawn\", \"\", \"whitePawn\", \"whitePawn\", \"blackKnight\", \"\", \"blackBishop\", \"\", \"blackBishop\", \"whiteKing\", \"whiteQueen\", \"blackBishop\"],\n      possibleMoves: new Array(64).fill(false)\n    }\n  }\n\n  findSquares = (location) => {\n    let mod = location % 8;\n    let current = 0;\n    let possibleMoves = [];\n    let verticalPieceMovements = [-8, 8];\n    let horizontalPieceMovements = [-1, 1];\n    let diagonalPieceMovements = [-9, -7, 7, 9];\n    switch (this.state.boardState[location]) {\n      case \"whitePawn\":\n        current = location - 8;\n        if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n          possibleMoves.push(current);\n          if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\"))  {\n            possibleMoves.push(current - 8);\n          }\n        }\n\n        for (let i = 0; i < 2; i++) {\n          current = location + diagonalPieceMovements[i];\n          let counter = mod;\n          diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n          if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"black\") && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"blackPawn\":\n        current = location + 8;\n        if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n          possibleMoves.push(current);\n          if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\"))  {\n            possibleMoves.push(current + 8);\n          }\n        }\n\n        for (let i = 2; i < 4; i++) {\n          current = location + diagonalPieceMovements[i];\n          let counter = mod;\n          diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n          if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"black\") && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"whiteBishop\":\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n            if (possibleMoves.includes(index))  return true;\n            return false;\n          })})\n\n        console.log(possibleMoves)\n      break;\n\n      case \"blackBishop\":\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n            if (possibleMoves.includes(index))  return true;\n            return false;\n          })})\n\n        console.log(possibleMoves)\n      break;\n\n      case \"whiteRook\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          while (current < 64 && current > 0)  {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += verticalPieceMovements[movement];;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"white\"))  {\n            while (Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n              current += movement;\n              if (current > 63 || current < 0)  break;\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              if (this.state.boardState[current - movement].includes(\"black\"))  break;\n            }\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n          if (possibleMoves.includes(index))  return true;\n          return false;\n        })})\n\n        console.log( possibleMoves )\n        break;\n\n      case \"blackRook\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          while (current < 64 && current > 0)  {\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            current += verticalPieceMovements[movement];;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"black\"))  {\n            while (Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n              current += movement;\n              if (current > 63 || current < 0)  break;\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              if (this.state.boardState[current - movement].includes(\"white\"))  break;\n            }\n          }\n        }\n\n           this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n           })})\n\n          console.log( possibleMoves )\n        break;\n      case \"whiteQueen\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          while (current < 64 && current > 0)  {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += verticalPieceMovements[movement];;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"white\"))  {\n            while (Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n              current += movement;\n              if (current > 63 || current < 0)  break;\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              if (this.state.boardState[current - movement].includes(\"black\"))  break;\n            }\n          }\n        }\n\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"blackQueen\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          while (current < 64 && current > 0)  {\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            current += verticalPieceMovements[movement];;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"black\"))  {\n            while (Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n              current += movement;\n              if (current > 63 || current < 0)  break;\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              if (this.state.boardState[current - movement].includes(\"white\"))  break;\n            }\n          }\n        }\n\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"whiteKing\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\"))  {\n            possibleMoves.push(current);\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n          }\n        }\n\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"blackKing\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\"))  {\n            possibleMoves.push(current);\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n          }\n        }\n\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      default:\n\n\n\n    }\n  }\n\n  clearMove = () => {\n    this.setState({ possibleMoves: new Array(64).fill(false) })\n  }\n\n\n\n\n\n\n\n  render(){\n    let board = this.state.colorGrid.map((value,index)=> {\n      return (\n        <Square\n          index = { index }\n          value = { value }\n          key = { index }\n          colorGrid = { this.state.colorGrid }\n          boardState = { this.state.boardState }\n          possibleMoves = { this.state.possibleMoves }\n          findSquares = { this.findSquares }\n          clearMove = {this.clearMove }\n        />\n      )\n    })\n    return(\n      <React.Fragment>\n\n        <h1>CHESS</h1>\n        <div id = \"boardBackground\">\n          <div id = \"boardHolder\">\n            <div id = \"boardHolderTwo\">\n              { board }\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}