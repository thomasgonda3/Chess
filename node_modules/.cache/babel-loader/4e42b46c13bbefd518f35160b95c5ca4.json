{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/chess/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.findSquares = location => {\n      let mod = location % 8;\n      let current = 0;\n      let possibleMoves = [];\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n      let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17];\n\n      switch (this.state.boardState[location]) {\n        case \"whitePawn\":\n          current = location - 8;\n\n          if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n            possibleMoves.push(current);\n\n            if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\")) {\n              possibleMoves.push(current - 8);\n            }\n          }\n\n          for (let i = 0; i < 2; i++) {\n            current = location + diagonalPieceMovements[i];\n            let counter = mod;\n            diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"black\") && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackPawn\":\n          current = location + 8;\n\n          if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n            possibleMoves.push(current);\n\n            if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\")) {\n              possibleMoves.push(current + 8);\n            }\n          }\n\n          for (let i = 2; i < 4; i++) {\n            current = location + diagonalPieceMovements[i];\n            let counter = mod;\n            diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"white\") && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteKnight\":\n          for (let movement of knightPieceMovements) {\n            current = movement + location;\n\n            if (current < 64 && current > 0) {\n              let spacesAway = 0;\n              if (movement === -15 || movement === 17) spacesAway = 1;\n              if (movement === -17 || movement === 15) spacesAway = -1;\n              if (movement === -6 || movement === 10) spacesAway = 2;\n              if (movement === -10 || movement === 6) spacesAway = -2;\n              if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n              if (this.state.boardState[current].includes(\"white\")) continue;\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackKnight\":\n          for (let movement of knightPieceMovements) {\n            current = movement + location;\n\n            if (current < 64 && current > 0) {\n              let spacesAway = 0;\n              if (movement === -15 || movement === 17) spacesAway = 1;\n              if (movement === -17 || movement === 15) spacesAway = -1;\n              if (movement === -6 || movement === 10) spacesAway = 2;\n              if (movement === -10 || movement === 6) spacesAway = -2;\n              if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n              if (this.state.boardState[current].includes(\"black\")) continue;\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteRook\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"white\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"white\")) break;\n                if (this.state.boardState[current - movement].includes(\"black\")) break;\n              }\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackRook\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"black\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"black\")) break;\n                if (this.state.boardState[current - movement].includes(\"white\")) break;\n              }\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteQueen\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"white\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"white\")) break;\n                if (this.state.boardState[current - movement].includes(\"black\")) break;\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackQueen\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"black\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"black\")) break;\n                if (this.state.boardState[current - movement].includes(\"white\")) break;\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteKing\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackKing\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        default:\n      }\n    };\n\n    this.clearMove = () => {\n      if (this.state.moveSelected === false) {\n        this.setState({\n          possibleMoves: new Array(64).fill(false)\n        });\n      }\n    };\n\n    this.movePiece = (currentPiece, position) => {\n      //select piece\n      if (this.state.moveSelected === false && this.state.boardState[position] !== \"\") {\n        this.setState({\n          currentPiece: currentPiece,\n          startingPosition: position,\n          moveSelected: true\n        });\n      } else {\n        //cancel move\n        if (position === this.state.startingPosition) {\n          this.setState({\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false\n          });\n        } //make move\n\n\n        if (this.state.possibleMoves[position] === true) {\n          if (this.state.startingPosition < position) {\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1)],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false\n            });\n          } else {\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1)],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false\n            });\n          }\n        }\n      }\n\n      console.log(this.state.moveSelected, this.state.startingPosition, this.state.currentPiece);\n    };\n\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"whiteBishop\", \"blackBishop\", \"\", \"\", \"blackKnight\", \"whiteBishop\", \"blackQueen\", \"whiteBishop\", \"blackBishop\", \"\", \"\", \"blackKing\", \"\", \"\", \"whiteKing\", \"\", \"blackBishop\", \"\", \"\", \"\", \"blackBishop\", \"blackPawn\", \"\", \"\", \"\", \"whiteKnight\", \"\", \"\", \"whiteBishop\", \"\", \"\", \"blackQueen\", \"blackRook\", \"\", \"blackRook\", \"\", \"blackRook\", \"\", \"\", \"blackPawn\", \"\", \"whitePawn\", \"\", \"whiteKing\", \"\", \"whiteKing\", \"\", \"\", \"whitePawn\", \"\", \"blackKnight\", \"\", \"whitePawn\", \"\", \"whitePawn\", \"whitePawn\", \"blackKnight\", \"whiteKnight\", \"blackBishop\", \"\", \"blackBishop\", \"whiteKing\", \"whiteQueen\", \"blackBishop\"],\n      possibleMoves: new Array(64).fill(false),\n      moveSelected: false,\n      currentPiece: \"\",\n      startingPosition: -1\n    };\n  }\n\n  render() {\n    let board = this.state.colorGrid.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        index: index,\n        value: value,\n        key: index,\n        colorGrid: this.state.colorGrid,\n        boardState: this.state.boardState,\n        possibleMoves: this.state.possibleMoves,\n        findSquares: this.findSquares,\n        clearMove: this.clearMove,\n        movePiece: this.movePiece,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }\n    }, \"CHESS\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolderTwo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 13\n      }\n    }, board))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/chess/src/App.js"],"names":["React","Component","Square","App","constructor","props","findSquares","location","mod","current","possibleMoves","verticalPieceMovements","horizontalPieceMovements","diagonalPieceMovements","knightPieceMovements","state","boardState","includes","push","Math","floor","i","counter","setState","map","value","index","console","log","movement","spacesAway","clearMove","moveSelected","Array","fill","movePiece","currentPiece","position","startingPosition","slice","colorGrid","render","board"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"whiteBishop\", \"blackBishop\", \"\", \"\", \"blackKnight\", \"whiteBishop\", \"blackQueen\", \"whiteBishop\", \"blackBishop\", \"\", \"\", \"blackKing\", \"\", \"\", \"whiteKing\", \"\", \"blackBishop\", \"\", \"\", \"\", \"blackBishop\", \"blackPawn\", \"\", \"\", \"\", \"whiteKnight\", \"\", \"\", \"whiteBishop\", \"\", \"\", \"blackQueen\", \"blackRook\", \"\", \"blackRook\", \"\", \"blackRook\", \"\", \"\", \"blackPawn\", \"\", \"whitePawn\", \"\", \"whiteKing\", \"\", \"whiteKing\", \"\", \"\", \"whitePawn\", \"\", \"blackKnight\", \"\", \"whitePawn\", \"\", \"whitePawn\", \"whitePawn\", \"blackKnight\", \"whiteKnight\", \"blackBishop\", \"\", \"blackBishop\", \"whiteKing\", \"whiteQueen\", \"blackBishop\"],\n      possibleMoves: new Array(64).fill(false),\n      moveSelected: false,\n      currentPiece: \"\",\n      startingPosition: -1\n    }\n  }\n\n  findSquares = (location) => {\n    let mod = location % 8;\n    let current = 0;\n    let possibleMoves = [];\n    let verticalPieceMovements = [-8, 8];\n    let horizontalPieceMovements = [-1, 1];\n    let diagonalPieceMovements = [-9, -7, 7, 9];\n    let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17]\n    switch (this.state.boardState[location]) {\n      case \"whitePawn\":\n        current = location - 8;\n        if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n          possibleMoves.push(current);\n          if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\"))  {\n            possibleMoves.push(current - 8);\n          }\n        }\n\n        for (let i = 0; i < 2; i++) {\n          current = location + diagonalPieceMovements[i];\n          let counter = mod;\n          diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n          if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"black\") && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"blackPawn\":\n        current = location + 8;\n        if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n          possibleMoves.push(current);\n          if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\"))  {\n            possibleMoves.push(current + 8);\n          }\n        }\n\n        for (let i = 2; i < 4; i++) {\n          current = location + diagonalPieceMovements[i];\n          let counter = mod;\n          diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n          if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"white\") && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"whiteKnight\":\n        for (let movement of knightPieceMovements) {\n          current = movement + location\n          if (current < 64 && current > 0) {\n            let spacesAway = 0;\n            if (movement === -15 || movement === 17) spacesAway = 1;\n            if (movement === -17 || movement === 15) spacesAway = -1;\n            if (movement === -6 || movement === 10) spacesAway = 2;\n            if (movement === -10 || movement === 6) spacesAway = -2;\n            if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n            if (this.state.boardState[current].includes(\"white\")) continue;\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"blackKnight\":\n        for (let movement of knightPieceMovements) {\n          current = movement + location\n          if (current < 64 && current > 0) {\n            let spacesAway = 0;\n            if (movement === -15 || movement === 17) spacesAway = 1;\n            if (movement === -17 || movement === 15) spacesAway = -1;\n            if (movement === -6 || movement === 10) spacesAway = 2;\n            if (movement === -10 || movement === 6) spacesAway = -2;\n            if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n            if (this.state.boardState[current].includes(\"black\")) continue;\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"whiteBishop\":\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n            if (possibleMoves.includes(index))  return true;\n            return false;\n          })})\n\n        console.log(possibleMoves)\n      break;\n\n      case \"blackBishop\":\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n            if (possibleMoves.includes(index))  return true;\n            return false;\n          })})\n\n        console.log(possibleMoves)\n      break;\n\n      case \"whiteRook\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          while (current < 64 && current > 0)  {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += verticalPieceMovements[movement];;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"white\"))  {\n            while (Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n              current += movement;\n              if (current > 63 || current < 0)  break;\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              if (this.state.boardState[current - movement].includes(\"black\"))  break;\n            }\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n          if (possibleMoves.includes(index))  return true;\n          return false;\n        })})\n\n        console.log( possibleMoves )\n        break;\n\n      case \"blackRook\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          while (current < 64 && current > 0)  {\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            current += verticalPieceMovements[movement];;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"black\"))  {\n            while (Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n              current += movement;\n              if (current > 63 || current < 0)  break;\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              if (this.state.boardState[current - movement].includes(\"white\"))  break;\n            }\n          }\n        }\n\n           this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n           })})\n\n          console.log( possibleMoves )\n        break;\n      case \"whiteQueen\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          while (current < 64 && current > 0)  {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += verticalPieceMovements[movement];;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"white\"))  {\n            while (Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n              current += movement;\n              if (current > 63 || current < 0)  break;\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              if (this.state.boardState[current - movement].includes(\"black\"))  break;\n            }\n          }\n        }\n\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"blackQueen\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          while (current < 64 && current > 0)  {\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            current += verticalPieceMovements[movement];;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"black\"))  {\n            while (Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n              current += movement;\n              if (current > 63 || current < 0)  break;\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              if (this.state.boardState[current - movement].includes(\"white\"))  break;\n            }\n          }\n        }\n\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"whiteKing\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\"))  {\n            possibleMoves.push(current);\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n          }\n        }\n\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      case \"blackKing\":\n        for (let movement in verticalPieceMovements) {\n          let current = location + verticalPieceMovements[movement];\n          if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\"))  {\n            possibleMoves.push(current);\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n          }\n        }\n\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n            possibleMoves.push(current);\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n         if (possibleMoves.includes(index))  return true;\n         return false;\n        })})\n\n        console.log( possibleMoves )\n      break;\n      default:\n\n\n\n    }\n  }\n\n  clearMove = () => {\n    if (this.state.moveSelected === false)  {\n      this.setState({ possibleMoves: new Array(64).fill(false) })\n    }\n  }\n\n  movePiece = (currentPiece, position) => {\n    //select piece\n    if (this.state.moveSelected === false && this.state.boardState[position] !== \"\")  {\n      this.setState({\n      currentPiece: currentPiece,\n      startingPosition: position,\n      moveSelected: true,\n    })} else {\n        //cancel move\n        if (position === this.state.startingPosition)  {\n          this.setState({\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false\n          })\n        }\n        //make move\n        if (this.state.possibleMoves[position] === true) {\n          if (this.state.startingPosition < position) {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1)],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false\n          })} else {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1)],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false\n          })\n          }\n        }\n    }\n    console.log(this.state.moveSelected, this.state.startingPosition, this.state.currentPiece)\n  }\n\n  render(){\n    let board = this.state.colorGrid.map((value,index)=> {\n      return (\n        <Square\n          index = { index }\n          value = { value }\n          key = { index }\n          colorGrid = { this.state.colorGrid }\n          boardState = { this.state.boardState }\n          possibleMoves = { this.state.possibleMoves }\n          findSquares = { this.findSquares }\n          clearMove = { this.clearMove }\n          movePiece = { this.movePiece }\n        />\n      )\n    })\n    return(\n      <React.Fragment>\n\n        <h1>CHESS</h1>\n        <div id = \"boardBackground\">\n          <div id = \"boardHolder\">\n            <div id = \"boardHolderTwo\">\n              { board }\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}