{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/chess/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.findSquares = location => {\n      if (this.state.moveSelected === false) {\n        let mod = location % 8;\n        let current = 0;\n        let possibleMoves = [];\n        let verticalPieceMovements = [-8, 8];\n        let horizontalPieceMovements = [-1, 1];\n        let diagonalPieceMovements = [-9, -7, 7, 9];\n        let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17];\n\n        switch (this.state.boardState[location]) {\n          case \"whitePawn\":\n            current = location - 8;\n\n            if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n              possibleMoves.push(current);\n\n              if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\")) {\n                possibleMoves.push(current - 8);\n              }\n            }\n\n            for (let i = 0; i < 2; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"black\") && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"blackPawn\":\n            current = location + 8;\n\n            if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n              possibleMoves.push(current);\n\n              if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\")) {\n                possibleMoves.push(current + 8);\n              }\n            }\n\n            for (let i = 2; i < 4; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"white\") && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"whiteKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location;\n\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"white\")) continue;\n                possibleMoves.push(current);\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"blackKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location;\n\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"black\")) continue;\n                possibleMoves.push(current);\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"whiteBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\")) break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"blackBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\")) break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"whiteRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (this.state.boardState[current].includes(\"white\")) break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n\n              if (!this.state.boardState[current].includes(\"white\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  if (this.state.boardState[current - movement].includes(\"black\")) break;\n                }\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"blackRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (this.state.boardState[current].includes(\"black\")) break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n\n              if (!this.state.boardState[current].includes(\"black\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  if (this.state.boardState[current - movement].includes(\"white\")) break;\n                }\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"whiteQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (this.state.boardState[current].includes(\"white\")) break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!this.state.boardState[current].includes(\"white\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  if (this.state.boardState[current - movement].includes(\"black\")) break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\")) break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"blackQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (this.state.boardState[current].includes(\"black\")) break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!this.state.boardState[current].includes(\"black\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  if (this.state.boardState[current - movement].includes(\"white\")) break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\")) break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"whiteKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\")) {\n                possibleMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n                possibleMoves.push(current);\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          case \"blackKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\")) {\n                possibleMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n                possibleMoves.push(current);\n              }\n            }\n\n            this.setState({\n              possibleMoves: this.state.possibleMoves.map((value, index) => {\n                if (possibleMoves.includes(index)) return true;\n                return false;\n              })\n            });\n            console.log(possibleMoves);\n            break;\n\n          default:\n        }\n      }\n    };\n\n    this.clearMove = () => {\n      if (this.state.moveSelected === false) {\n        this.setState({\n          possibleMoves: new Array(64).fill(false)\n        });\n      }\n    };\n\n    this.movePiece = (currentPiece, position) => {\n      //select piece\n      if (this.state.moveSelected === false && this.state.boardState[position] !== \"\") {\n        this.setState({\n          currentPiece: currentPiece,\n          startingPosition: position,\n          moveSelected: true\n        });\n      } else {\n        //cancel move\n        if (position === this.state.startingPosition) {\n          this.setState({\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false)\n          });\n        } //make move\n\n\n        if (this.state.possibleMoves[position] === true) {\n          if (this.state.startingPosition < position) {\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1)],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false)\n            });\n          } else {\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1, this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1)],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false)\n            });\n          }\n        }\n      } //console.log(this.state.moveSelected, this.state.startingPosition, this.state.currentPiece)\n\n    };\n\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"blackRook\", \"blackKnight\", \"blackBishop\", \"blackQueen\", \"blackKing\", \"blackBishop\", \"blackKnight\", \"blackRook\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whiteRook\", \"whiteKnight\", \"whiteBishop\", \"whiteQueen\", \"whiteKing\", \"whiteBishop\", \"whiteKnight\", \"whiteRook\"],\n      possibleMoves: new Array(64).fill(false),\n      moveSelected: false,\n      currentPiece: \"\",\n      startingPosition: -1,\n      playerTurn: \"White\"\n    };\n  }\n\n  render() {\n    console.log(this.state.moveSelected, this.state.startingPosition, this.state.currentPiece, this.state.boardState);\n    let board = this.state.colorGrid.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        index: index,\n        value: value,\n        key: index,\n        colorGrid: this.state.colorGrid,\n        boardState: this.state.boardState,\n        possibleMoves: this.state.possibleMoves,\n        findSquares: this.findSquares,\n        clearMove: this.clearMove,\n        movePiece: this.movePiece,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }\n    }, \"CHESS\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolderTwo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 13\n      }\n    }, board))), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }\n    }, `It is ${this.state.playerTurn}'s turn.`));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/chess/src/App.js"],"names":["React","Component","Square","App","constructor","props","findSquares","location","state","moveSelected","mod","current","possibleMoves","verticalPieceMovements","horizontalPieceMovements","diagonalPieceMovements","knightPieceMovements","boardState","includes","push","Math","floor","i","counter","setState","map","value","index","console","log","movement","spacesAway","clearMove","Array","fill","movePiece","currentPiece","position","startingPosition","slice","colorGrid","playerTurn","render","board"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"blackRook\", \"blackKnight\", \"blackBishop\", \"blackQueen\", \"blackKing\", \"blackBishop\", \"blackKnight\", \"blackRook\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whiteRook\", \"whiteKnight\", \"whiteBishop\", \"whiteQueen\", \"whiteKing\", \"whiteBishop\", \"whiteKnight\", \"whiteRook\"],\n      possibleMoves: new Array(64).fill(false),\n      moveSelected: false,\n      currentPiece: \"\",\n      startingPosition: -1,\n      playerTurn: \"White\"\n    }\n  }\n\n  findSquares = (location) => {\n    if (this.state.moveSelected === false) {\n      let mod = location % 8;\n      let current = 0;\n      let possibleMoves = [];\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n      let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17]\n      switch (this.state.boardState[location]) {\n        case \"whitePawn\":\n          current = location - 8;\n          if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n            possibleMoves.push(current);\n            if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\"))  {\n              possibleMoves.push(current - 8);\n            }\n          }\n\n          for (let i = 0; i < 2; i++) {\n            current = location + diagonalPieceMovements[i];\n            let counter = mod;\n            diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"black\") && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n           if (possibleMoves.includes(index))  return true;\n           return false;\n          })})\n\n          console.log( possibleMoves )\n        break;\n        case \"blackPawn\":\n          current = location + 8;\n          if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n            possibleMoves.push(current);\n            if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\"))  {\n              possibleMoves.push(current + 8);\n            }\n          }\n\n          for (let i = 2; i < 4; i++) {\n            current = location + diagonalPieceMovements[i];\n            let counter = mod;\n            diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && this.state.boardState[current].includes(\"white\") && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n           if (possibleMoves.includes(index))  return true;\n           return false;\n          })})\n\n          console.log( possibleMoves )\n        break;\n        case \"whiteKnight\":\n          for (let movement of knightPieceMovements) {\n            current = movement + location\n            if (current < 64 && current > 0) {\n              let spacesAway = 0;\n              if (movement === -15 || movement === 17) spacesAway = 1;\n              if (movement === -17 || movement === 15) spacesAway = -1;\n              if (movement === -6 || movement === 10) spacesAway = 2;\n              if (movement === -10 || movement === 6) spacesAway = -2;\n              if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n              if (this.state.boardState[current].includes(\"white\")) continue;\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n           if (possibleMoves.includes(index))  return true;\n           return false;\n          })})\n\n          console.log( possibleMoves )\n        break;\n        case \"blackKnight\":\n          for (let movement of knightPieceMovements) {\n            current = movement + location\n            if (current < 64 && current > 0) {\n              let spacesAway = 0;\n              if (movement === -15 || movement === 17) spacesAway = 1;\n              if (movement === -17 || movement === 15) spacesAway = -1;\n              if (movement === -6 || movement === 10) spacesAway = 2;\n              if (movement === -10 || movement === 6) spacesAway = -2;\n              if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n              if (this.state.boardState[current].includes(\"black\")) continue;\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n           if (possibleMoves.includes(index))  return true;\n           return false;\n          })})\n\n          console.log( possibleMoves )\n        break;\n        case \"whiteBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n              if (possibleMoves.includes(index))  return true;\n              return false;\n            })})\n\n          console.log(possibleMoves)\n        break;\n\n        case \"blackBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n              if (possibleMoves.includes(index))  return true;\n              return false;\n            })})\n\n          console.log(possibleMoves)\n        break;\n\n        case \"whiteRook\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n            while (current < 64 && current > 0)  {\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              current += verticalPieceMovements[movement];;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements)  {\n            let current = location + movement;\n            if (current < 0 || current > 63) continue;\n            if (!this.state.boardState[current].includes(\"white\"))  {\n              while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0)  break;\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                if (this.state.boardState[current - movement].includes(\"black\"))  break;\n              }\n            }\n          }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n            if (possibleMoves.includes(index))  return true;\n            return false;\n          })})\n\n          console.log( possibleMoves )\n          break;\n\n        case \"blackRook\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n            while (current < 64 && current > 0)  {\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              current += verticalPieceMovements[movement];;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements)  {\n            let current = location + movement;\n            if (current < 0 || current > 63) continue;\n            if (!this.state.boardState[current].includes(\"black\"))  {\n              while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0)  break;\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                if (this.state.boardState[current - movement].includes(\"white\"))  break;\n              }\n            }\n          }\n\n             this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n               if (possibleMoves.includes(index))  return true;\n               return false;\n             })})\n\n            console.log( possibleMoves )\n          break;\n        case \"whiteQueen\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n            while (current < 64 && current > 0)  {\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              current += verticalPieceMovements[movement];;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements)  {\n            let current = location + movement;\n            if (!this.state.boardState[current].includes(\"white\"))  {\n              while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0)  break;\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                if (this.state.boardState[current - movement].includes(\"black\"))  break;\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n           if (possibleMoves.includes(index))  return true;\n           return false;\n          })})\n\n          console.log( possibleMoves )\n        break;\n        case \"blackQueen\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n            while (current < 64 && current > 0)  {\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              current += verticalPieceMovements[movement];;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements)  {\n            let current = location + movement;\n            if (!this.state.boardState[current].includes(\"black\"))  {\n              while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0)  break;\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                if (this.state.boardState[current - movement].includes(\"white\"))  break;\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\"))  break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n           if (possibleMoves.includes(index))  return true;\n           return false;\n          })})\n\n          console.log( possibleMoves )\n        break;\n        case \"whiteKing\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n            if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\"))  {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement of horizontalPieceMovements)  {\n            let current = location + movement;\n            if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                possibleMoves.push(current);\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n           if (possibleMoves.includes(index))  return true;\n           return false;\n          })})\n\n          console.log( possibleMoves )\n        break;\n        case \"blackKing\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n            if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\"))  {\n              possibleMoves.push(current);\n            }\n          }\n\n          for (let movement of horizontalPieceMovements)  {\n            let current = location + movement;\n            if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                possibleMoves.push(current);\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n              possibleMoves.push(current);\n            }\n          }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n           if (possibleMoves.includes(index))  return true;\n           return false;\n          })})\n\n          console.log( possibleMoves )\n        break;\n        default:\n\n\n\n      }\n    }\n  }\n\n  clearMove = () => {\n    if (this.state.moveSelected === false)  {\n      this.setState({ possibleMoves: new Array(64).fill(false) })\n    }\n  }\n\n  movePiece = (currentPiece, position) => {\n    //select piece\n    if (this.state.moveSelected === false && this.state.boardState[position] !== \"\")  {\n      this.setState({\n      currentPiece: currentPiece,\n      startingPosition: position,\n      moveSelected: true,\n    })} else {\n        //cancel move\n        if (position === this.state.startingPosition)  {\n          this.setState({\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false)\n          })\n        }\n        //make move\n        if (this.state.possibleMoves[position] === true) {\n          if (this.state.startingPosition < position) {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1)],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n          })} else {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position), this.state.currentPiece, ...this.state.boardState.slice(position + 1, this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1)],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false)\n          })\n          }\n        }\n    }\n    //console.log(this.state.moveSelected, this.state.startingPosition, this.state.currentPiece)\n  }\n\n  render(){\n    console.log(this.state.moveSelected, this.state.startingPosition, this.state.currentPiece, this.state.boardState)\n    let board = this.state.colorGrid.map((value,index)=> {\n      return (\n        <Square\n          index = { index }\n          value = { value }\n          key = { index }\n          colorGrid = { this.state.colorGrid }\n          boardState = { this.state.boardState }\n          possibleMoves = { this.state.possibleMoves }\n          findSquares = { this.findSquares }\n          clearMove = { this.clearMove }\n          movePiece = { this.movePiece }\n        />\n      )\n    })\n    return(\n      <React.Fragment>\n\n        <h1>CHESS</h1>\n        <div id = \"boardBackground\">\n          <div id = \"boardHolder\">\n            <div id = \"boardHolderTwo\">\n              { board }\n            </div>\n          </div>\n        </div>\n\n        <h3>{`It is ${this.state.playerTurn}'s turn.`}</h3>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}