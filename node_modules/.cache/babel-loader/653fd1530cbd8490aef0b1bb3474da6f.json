{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/chess/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.findSquares = location => {\n      let mod = location % 8;\n\n      switch (this.state.boardState[location]) {\n        case \"whiteRook\":\n          let possibleMoves = [];\n          let verticalPieceMovements = [-8, 8];\n          let horizontalPieceMovements = [-1, 1];\n\n          for (let movement of verticalPieceMovements) {\n            let current = location;\n\n            while (current < 56 && current > 7) {\n              current += movement; //if (this.state.boardState[current].contains(\"white\"))  break;\n\n              possibleMoves.push(current); //if (this.state.boardState[current].contains(\"black\"))  break;\n            }\n          }\n\n          let current = location;\n\n          while (Math.floor(current * .125) === Math.floor(location * .125)) {\n            current -= 1; //if (this.state.boardState[current].contains(\"white\"))  break;\n\n            possibleMoves.push(current); //if (this.state.boardState[current].contains(\"black\"))  break;\n          } // this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n          //   if (possibleMoves.contains(index))  return true;\n          //   return false;\n          // })})\n\n\n          console.log(this.state.possibleMoves);\n          console.log(possibleMoves);\n          break;\n\n        default:\n      }\n    };\n\n    this.clearMove = () => {\n      this.setState({\n        possibleMoves: new Array(64).fill(false)\n      });\n    };\n\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"\", \"whitePawn\", \"\", \"\", \"\", \"\", \"blackQueen\", \"\", \"\", \"\", \"\", \"blackKing\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"blackPawn\", \"\", \"\", \"\", \"whiteKnight\", \"\", \"\", \"whiteBishop\", \"\", \"\", \"\", \"whiteRook\", \"\", \"blackRook\", \"\", \"\", \"\", \"\", \"whiteRook\", \"\", \"\", \"\", \"whiteQueen\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"blackKnight\", \"\", \"blackBishop\", \"\", \"\", \"whiteKing\", \"\", \"\"],\n      possibleMoves: new Array(64).fill(false)\n    };\n  }\n\n  render() {\n    let board = this.state.colorGrid.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        index: index,\n        value: value,\n        key: index,\n        colorGrid: this.state.colorGrid,\n        boardState: this.state.boardState,\n        possibleMoves: this.state.possibleMoves,\n        findSquares: this.findSquares,\n        clearMove: this.clearMove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"CHESS\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolderTwo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, board))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/chess/src/App.js"],"names":["React","Component","Square","App","constructor","props","findSquares","location","mod","state","boardState","possibleMoves","verticalPieceMovements","horizontalPieceMovements","movement","current","push","Math","floor","console","log","clearMove","setState","Array","fill","colorGrid","render","board","map","value","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"\", \"whitePawn\", \"\", \"\", \"\", \"\", \"blackQueen\", \"\", \"\", \"\", \"\", \"blackKing\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"blackPawn\", \"\", \"\", \"\", \"whiteKnight\", \"\", \"\", \"whiteBishop\", \"\", \"\", \"\", \"whiteRook\", \"\", \"blackRook\", \"\", \"\", \"\", \"\", \"whiteRook\", \"\", \"\", \"\", \"whiteQueen\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"blackKnight\", \"\", \"blackBishop\", \"\", \"\", \"whiteKing\", \"\", \"\"],\n      possibleMoves: new Array(64).fill(false)\n    }\n  }\n\n  findSquares = (location) => {\n    let mod = location % 8\n    switch (this.state.boardState[location]) {\n      case \"whiteRook\":\n        let possibleMoves = [];\n        let verticalPieceMovements = [-8, 8];\n        let horizontalPieceMovements = [-1, 1];\n\n        for (let movement of verticalPieceMovements)  {\n          let current = location;\n          while (current < 56 && current > 7)  {\n            current += movement;\n            //if (this.state.boardState[current].contains(\"white\"))  break;\n            possibleMoves.push(current);\n            //if (this.state.boardState[current].contains(\"black\"))  break;\n          }\n        }\n\n          let current = location;\n          while (Math.floor(current * .125) === Math.floor(location * .125))  {\n            current -= 1;\n            //if (this.state.boardState[current].contains(\"white\"))  break;\n            possibleMoves.push(current);\n            //if (this.state.boardState[current].contains(\"black\"))  break;\n          }\n\n        // this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n        //   if (possibleMoves.contains(index))  return true;\n        //   return false;\n        // })})\n        console.log( this.state.possibleMoves )\n        console.log( possibleMoves )\n\n        break;\n      default:\n\n    }\n  }\n\n  clearMove = () => {\n    this.setState({ possibleMoves: new Array(64).fill(false) })\n  }\n\n\n\n\n\n\n\n  render(){\n    let board = this.state.colorGrid.map((value,index)=> {\n      return (\n        <Square\n          index = { index }\n          value = { value }\n          key = { index }\n          colorGrid = { this.state.colorGrid }\n          boardState = { this.state.boardState }\n          possibleMoves = { this.state.possibleMoves }\n          findSquares = { this.findSquares }\n          clearMove = {this.clearMove }\n        />\n      )\n    })\n    return(\n      <React.Fragment>\n\n        <h1>CHESS</h1>\n        <div id = \"boardBackground\">\n          <div id = \"boardHolder\">\n            <div id = \"boardHolderTwo\">\n              { board }\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}