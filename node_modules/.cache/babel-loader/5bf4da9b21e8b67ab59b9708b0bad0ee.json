{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/chess/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.findSquares = location => {\n      let mod = location % 8;\n      let possibleMoves = [];\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n\n      switch (this.state.boardState[location]) {\n        case \"whiteBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteRook\":\n          for (let movement of verticalPieceMovements) {\n            let current = location;\n\n            while (current < 56 && current > 7) {\n              current += movement;\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            while (Math.floor(current * .125) === Math.floor(location * .125)) {\n              possibleMoves.push(current);\n              current += movement;\n              if (this.state.boardState[current].includes(\"white\")) break;\n              if (this.state.boardState[current - movement].includes(\"black\")) break;\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"blackRook\":\n          for (let movement of verticalPieceMovements) {\n            let current = location;\n\n            while (current < 56 && current > 7) {\n              current += movement;\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            while (Math.floor(current * .125) === Math.floor(location * .125)) {\n              possibleMoves.push(current);\n              current += movement;\n              if (this.state.boardState[current].includes(\"black\")) break;\n              if (this.state.boardState[current - movement].includes(\"white\")) break;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        case \"whiteQueen\":\n          for (let movement of verticalPieceMovements) {\n            let current = location;\n\n            while (current < 56 && current > 7) {\n              current += movement;\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            while (Math.floor(current * .125) === Math.floor(location * .125)) {\n              possibleMoves.push(current);\n              current += movement;\n              if (this.state.boardState[current].includes(\"white\")) break;\n              if (this.state.boardState[current - movement].includes(\"black\")) break;\n            }\n          }\n\n          this.setState({\n            possibleMoves: this.state.possibleMoves.map((value, index) => {\n              if (possibleMoves.includes(index)) return true;\n              return false;\n            })\n          });\n          console.log(possibleMoves);\n          break;\n\n        default:\n      }\n    };\n\n    this.clearMove = () => {\n      this.setState({\n        possibleMoves: new Array(64).fill(false)\n      });\n    };\n\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"whiteBishop\", \"blackBishop\", \"\", \"\", \"\", \"whiteBishop\", \"blackQueen\", \"whiteBishop\", \"blackBishop\", \"\", \"\", \"blackKing\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"blackBishop\", \"blackPawn\", \"\", \"\", \"\", \"whiteKnight\", \"\", \"\", \"whiteBishop\", \"\", \"\", \"blackQueen\", \"whiteRook\", \"\", \"blackRook\", \"\", \"whiteRook\", \"\", \"\", \"whiteRook\", \"\", \"\", \"\", \"whiteQueen\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"blackKnight\", \"\", \"blackBishop\", \"\", \"blackBishop\", \"whiteKing\", \"\", \"blackBishop\"],\n      possibleMoves: new Array(64).fill(false)\n    };\n  }\n\n  render() {\n    let board = this.state.colorGrid.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        index: index,\n        value: value,\n        key: index,\n        colorGrid: this.state.colorGrid,\n        boardState: this.state.boardState,\n        possibleMoves: this.state.possibleMoves,\n        findSquares: this.findSquares,\n        clearMove: this.clearMove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 9\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }, \"CHESS\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolderTwo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }, board))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/chess/src/App.js"],"names":["React","Component","Square","App","constructor","props","findSquares","location","mod","possibleMoves","verticalPieceMovements","horizontalPieceMovements","diagonalPieceMovements","state","boardState","movement","current","counter","includes","push","setState","map","value","index","console","log","Math","floor","clearMove","Array","fill","colorGrid","render","board"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"whiteBishop\", \"blackBishop\", \"\", \"\", \"\", \"whiteBishop\", \"blackQueen\", \"whiteBishop\", \"blackBishop\", \"\", \"\", \"blackKing\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"blackBishop\", \"blackPawn\", \"\", \"\", \"\", \"whiteKnight\", \"\", \"\", \"whiteBishop\", \"\", \"\", \"blackQueen\", \"whiteRook\", \"\", \"blackRook\", \"\", \"whiteRook\", \"\", \"\", \"whiteRook\", \"\", \"\", \"\", \"whiteQueen\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"blackKnight\", \"\", \"blackBishop\", \"\", \"blackBishop\", \"whiteKing\", \"\", \"blackBishop\"],\n      possibleMoves: new Array(64).fill(false)\n    }\n  }\n\n  findSquares = (location) => {\n    let mod = location % 8\n    let possibleMoves = [];\n    let verticalPieceMovements = [-8, 8];\n    let horizontalPieceMovements = [-1, 1];\n    let diagonalPieceMovements = [-9, -7, 7, 9];\n    switch (this.state.boardState[location]) {\n      case \"whiteBishop\":\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n            if (possibleMoves.includes(index))  return true;\n            return false;\n          })})\n\n        console.log(possibleMoves)\n      break;\n\n      case \"blackBishop\":\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n          this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n            if (possibleMoves.includes(index))  return true;\n            return false;\n          })})\n\n        console.log(possibleMoves)\n      break;\n\n      case \"whiteRook\":\n        for (let movement of verticalPieceMovements) {\n          let current = location;\n          while (current < 56 && current > 7)  {\n            current += movement;\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          while (Math.floor(current * .125) === Math.floor(location * .125))  {\n            possibleMoves.push(current);\n            current += movement;\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            if (this.state.boardState[current - movement].includes(\"black\"))  break;\n          }\n        }\n\n        for (let movement in diagonalPieceMovements) {\n          let current = location + diagonalPieceMovements[movement];\n          let counter = mod;\n          movement % 2 === 0 ? counter-- : counter++;\n          while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n            current += diagonalPieceMovements[movement];\n            movement % 2 === 0 ? counter-- : counter++;\n          }\n        }\n\n        this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n          if (possibleMoves.includes(index))  return true;\n          return false;\n        })})\n\n        console.log( possibleMoves )\n        break;\n\n      case \"blackRook\":\n\n          for (let movement of verticalPieceMovements)  {\n            let current = location;\n            while (current < 56 && current > 7)  {\n              current += movement;\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\"))  break;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements)  {\n            let current = location + movement;\n            while (Math.floor(current * .125) === Math.floor(location * .125))  {\n              possibleMoves.push(current);\n              current += movement;\n              if (this.state.boardState[current].includes(\"black\"))  break;\n              if (this.state.boardState[current - movement].includes(\"white\"))  break;\n            }\n          }\n\n           this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n           })})\n\n          console.log( possibleMoves )\n        break;\n      case \"whiteQueen\":\n        for (let movement of verticalPieceMovements) {\n          let current = location;\n          while (current < 56 && current > 7)  {\n            current += movement;\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            possibleMoves.push(current);\n            if (this.state.boardState[current].includes(\"black\"))  break;\n          }\n        }\n\n        for (let movement of horizontalPieceMovements)  {\n          let current = location + movement;\n          while (Math.floor(current * .125) === Math.floor(location * .125))  {\n            possibleMoves.push(current);\n            current += movement;\n            if (this.state.boardState[current].includes(\"white\"))  break;\n            if (this.state.boardState[current - movement].includes(\"black\"))  break;\n          }\n        }\n\n         this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n           if (possibleMoves.includes(index))  return true;\n           return false;\n         })})\n\n        console.log( possibleMoves )\n      break;\n      default:\n\n\n\n    }\n  }\n\n  clearMove = () => {\n    this.setState({ possibleMoves: new Array(64).fill(false) })\n  }\n\n\n\n\n\n\n\n  render(){\n    let board = this.state.colorGrid.map((value,index)=> {\n      return (\n        <Square\n          index = { index }\n          value = { value }\n          key = { index }\n          colorGrid = { this.state.colorGrid }\n          boardState = { this.state.boardState }\n          possibleMoves = { this.state.possibleMoves }\n          findSquares = { this.findSquares }\n          clearMove = {this.clearMove }\n        />\n      )\n    })\n    return(\n      <React.Fragment>\n\n        <h1>CHESS</h1>\n        <div id = \"boardBackground\">\n          <div id = \"boardHolder\">\n            <div id = \"boardHolderTwo\">\n              { board }\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}