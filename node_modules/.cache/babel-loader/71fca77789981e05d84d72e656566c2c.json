{"ast":null,"code":"import _toConsumableArray from\"/Users/learnacademy/Desktop/Chess-ThomasG/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _createForOfIteratorHelper from\"/Users/learnacademy/Desktop/Chess-ThomasG/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _classCallCheck from\"/Users/learnacademy/Desktop/Chess-ThomasG/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/learnacademy/Desktop/Chess-ThomasG/node_modules/@babel/runtime/helpers/esm/createClass\";import _createSuper from\"/Users/learnacademy/Desktop/Chess-ThomasG/node_modules/@babel/runtime/helpers/esm/createSuper\";import _inherits from\"/Users/learnacademy/Desktop/Chess-ThomasG/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Square from'./components/Square';import whitePawn from'./images/Chess_plt60.png';import whiteRook from'./images/Chess_rlt60.png';import whiteKing from'./images/Chess_klt60.png';import blackKnight from'./images/Chess_ndt60.png';import blackBishop from'./images/Chess_bdt60.png';import blackQueen from'./images/Chess_qdt60.png';import'./App.css';var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.findSquares=function(location){if(_this.state.moveSelected===false){_this.checkSquaresControlled();var mod=location%8;var current=0;var possibleMoves=[];var verticalPieceMovements=[-8,8];var horizontalPieceMovements=[-1,1];var diagonalPieceMovements=[-9,-7,7,9];var knightPieceMovements=[-17,-15,-10,-6,6,10,15,17];switch(_this.state.boardState[location]){case\"whitePawn\":if(_this.state.playerTurn===\"White\"){current=location-8;if(current>7&&!_this.state.boardState[current].includes(\"white\")&&!_this.state.boardState[current].includes(\"black\")){possibleMoves.push(current);if(Math.floor(location*.125)===6&&!_this.state.boardState[current-8].includes(\"white\")&&!_this.state.boardState[current-8].includes(\"black\")){possibleMoves.push(current-8);}}for(var i=0;i<2;i++){current=location+diagonalPieceMovements[i];var counter=mod;diagonalPieceMovements[i]%2===0?counter--:counter++;if(current<64&&current>0&&counter>=0&&counter<=8&&(_this.state.boardState[current].includes(\"black\")||current===_this.state.possibleEnPassantSquare)&&Math.floor((location-8)*.125)===Math.floor(current*.125)){possibleMoves.push(current);}}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"blackPawn\":if(_this.state.playerTurn===\"Black\"){current=location+8;if(current<56&&!_this.state.boardState[current].includes(\"white\")&&!_this.state.boardState[current].includes(\"black\")){possibleMoves.push(current);if(Math.floor(location*.125)===1&&!_this.state.boardState[current+8].includes(\"white\")&&!_this.state.boardState[current+8].includes(\"black\")){possibleMoves.push(current+8);}}for(var _i=2;_i<4;_i++){current=location+diagonalPieceMovements[_i];var _counter=mod;diagonalPieceMovements[_i]%2===0?_counter--:_counter++;if(current<64&&current>0&&_counter>=0&&_counter<=8&&(_this.state.boardState[current].includes(\"white\")||current===_this.state.possibleEnPassantSquare)&&Math.floor((location+8)*.125)===Math.floor(current*.125)){possibleMoves.push(current);}}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"whiteKnight\":if(_this.state.playerTurn===\"White\"){var _iterator=_createForOfIteratorHelper(knightPieceMovements),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var movement=_step.value;current=movement+location;if(current<64&&current>0){var spacesAway=0;if(movement===-15||movement===17)spacesAway=1;if(movement===-17||movement===15)spacesAway=-1;if(movement===-6||movement===10)spacesAway=2;if(movement===-10||movement===6)spacesAway=-2;if(Math.floor(location*.125)!==Math.floor((location+spacesAway)*.125))continue;if(_this.state.boardState[current].includes(\"white\"))continue;possibleMoves.push(current);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"blackKnight\":if(_this.state.playerTurn===\"Black\"){var _iterator2=_createForOfIteratorHelper(knightPieceMovements),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _movement=_step2.value;current=_movement+location;if(current<64&&current>0){var _spacesAway=0;if(_movement===-15||_movement===17)_spacesAway=1;if(_movement===-17||_movement===15)_spacesAway=-1;if(_movement===-6||_movement===10)_spacesAway=2;if(_movement===-10||_movement===6)_spacesAway=-2;if(Math.floor(location*.125)!==Math.floor((location+_spacesAway)*.125))continue;if(_this.state.boardState[current].includes(\"black\"))continue;possibleMoves.push(current);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"whiteBishop\":if(_this.state.playerTurn===\"White\"){for(var _movement2 in diagonalPieceMovements){var _current=location+diagonalPieceMovements[_movement2];var _counter2=mod;_movement2%2===0?_counter2--:_counter2++;while(_current<64&&_current>0&&_counter2>=0&&_counter2<8){if(_this.state.boardState[_current].includes(\"white\"))break;possibleMoves.push(_current);if(_this.state.boardState[_current].includes(\"black\"))break;_current+=diagonalPieceMovements[_movement2];_movement2%2===0?_counter2--:_counter2++;}}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"blackBishop\":if(_this.state.playerTurn===\"Black\"){for(var _movement3 in diagonalPieceMovements){var _current2=location+diagonalPieceMovements[_movement3];var _counter3=mod;_movement3%2===0?_counter3--:_counter3++;while(_current2<64&&_current2>0&&_counter3>=0&&_counter3<8){if(_this.state.boardState[_current2].includes(\"black\"))break;possibleMoves.push(_current2);if(_this.state.boardState[_current2].includes(\"white\"))break;_current2+=diagonalPieceMovements[_movement3];_movement3%2===0?_counter3--:_counter3++;}}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"whiteRook\":if(_this.state.playerTurn===\"White\"){for(var _movement4 in verticalPieceMovements){var _current3=location+verticalPieceMovements[_movement4];while(_current3<64&&_current3>0){if(_this.state.boardState[_current3].includes(\"white\"))break;possibleMoves.push(_current3);if(_this.state.boardState[_current3].includes(\"black\"))break;_current3+=verticalPieceMovements[_movement4];;}}var _iterator3=_createForOfIteratorHelper(horizontalPieceMovements),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _movement5=_step3.value;var _current4=location+_movement5;if(_current4<0||_current4>63)continue;if(!_this.state.boardState[_current4].includes(\"white\")){while(Math.floor(_current4*.125)===Math.floor(location*.125)){possibleMoves.push(_current4);_current4+=_movement5;if(_current4>63||_current4<0)break;if(_this.state.boardState[_current4].includes(\"white\"))break;if(_this.state.boardState[_current4-_movement5].includes(\"black\"))break;}}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"blackRook\":if(_this.state.playerTurn===\"Black\"){for(var _movement6 in verticalPieceMovements){var _current5=location+verticalPieceMovements[_movement6];while(_current5<64&&_current5>0){if(_this.state.boardState[_current5].includes(\"black\"))break;possibleMoves.push(_current5);if(_this.state.boardState[_current5].includes(\"white\"))break;_current5+=verticalPieceMovements[_movement6];;}}var _iterator4=_createForOfIteratorHelper(horizontalPieceMovements),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var _movement7=_step4.value;var _current6=location+_movement7;if(_current6<0||_current6>63)continue;if(!_this.state.boardState[_current6].includes(\"black\")){while(Math.floor(_current6*.125)===Math.floor(location*.125)){possibleMoves.push(_current6);_current6+=_movement7;if(_current6>63||_current6<0)break;if(_this.state.boardState[_current6].includes(\"black\"))break;if(_this.state.boardState[_current6-_movement7].includes(\"white\"))break;}}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"whiteQueen\":if(_this.state.playerTurn===\"White\"){for(var _movement8 in verticalPieceMovements){var _current7=location+verticalPieceMovements[_movement8];while(_current7<64&&_current7>0){if(_this.state.boardState[_current7].includes(\"white\"))break;possibleMoves.push(_current7);if(_this.state.boardState[_current7].includes(\"black\"))break;_current7+=verticalPieceMovements[_movement8];;}}var _iterator5=_createForOfIteratorHelper(horizontalPieceMovements),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _movement10=_step5.value;var _current9=location+_movement10;if(!_this.state.boardState[_current9].includes(\"white\")){while(Math.floor(_current9*.125)===Math.floor(location*.125)){possibleMoves.push(_current9);_current9+=_movement10;if(_current9>63||_current9<0)break;if(_this.state.boardState[_current9].includes(\"white\"))break;if(_this.state.boardState[_current9-_movement10].includes(\"black\"))break;}}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}for(var _movement9 in diagonalPieceMovements){var _current8=location+diagonalPieceMovements[_movement9];var _counter4=mod;_movement9%2===0?_counter4--:_counter4++;while(_current8<64&&_current8>0&&_counter4>=0&&_counter4<8){if(_this.state.boardState[_current8].includes(\"white\"))break;possibleMoves.push(_current8);if(_this.state.boardState[_current8].includes(\"black\"))break;_current8+=diagonalPieceMovements[_movement9];_movement9%2===0?_counter4--:_counter4++;}}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"blackQueen\":if(_this.state.playerTurn===\"Black\"){for(var _movement11 in verticalPieceMovements){var _current10=location+verticalPieceMovements[_movement11];while(_current10<64&&_current10>0){if(_this.state.boardState[_current10].includes(\"black\"))break;possibleMoves.push(_current10);if(_this.state.boardState[_current10].includes(\"white\"))break;_current10+=verticalPieceMovements[_movement11];;}}var _iterator6=_createForOfIteratorHelper(horizontalPieceMovements),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var _movement13=_step6.value;var _current12=location+_movement13;if(!_this.state.boardState[_current12].includes(\"black\")){while(Math.floor(_current12*.125)===Math.floor(location*.125)){possibleMoves.push(_current12);_current12+=_movement13;if(_current12>63||_current12<0)break;if(_this.state.boardState[_current12].includes(\"black\"))break;if(_this.state.boardState[_current12-_movement13].includes(\"white\"))break;}}}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}for(var _movement12 in diagonalPieceMovements){var _current11=location+diagonalPieceMovements[_movement12];var _counter5=mod;_movement12%2===0?_counter5--:_counter5++;while(_current11<64&&_current11>0&&_counter5>=0&&_counter5<8){if(_this.state.boardState[_current11].includes(\"black\"))break;possibleMoves.push(_current11);if(_this.state.boardState[_current11].includes(\"white\"))break;_current11+=diagonalPieceMovements[_movement12];_movement12%2===0?_counter5--:_counter5++;}}possibleMoves=possibleMoves.filter(function(value){return _this.checkIllegalMove(value,location);});_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"whiteKing\":if(_this.state.playerTurn===\"White\"){for(var _movement14 in verticalPieceMovements){var _current13=location+verticalPieceMovements[_movement14];if(_current13<64&&_current13>0&&!_this.state.boardState[_current13].includes(\"white\")){if(!_this.state.blackControlledSquares.includes(_current13)){possibleMoves.push(_current13);}}}var _iterator7=_createForOfIteratorHelper(horizontalPieceMovements),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var _movement16=_step7.value;var _current15=location+_movement16;if(!_this.state.boardState[_current15].includes(\"white\")&&Math.floor(_current15*.125)===Math.floor(location*.125)){if(!_this.state.blackControlledSquares.includes(_current15)){possibleMoves.push(_current15);}}}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}for(var _movement15 in diagonalPieceMovements){var _current14=location+diagonalPieceMovements[_movement15];var _counter6=mod;_movement15%2===0?_counter6--:_counter6++;if(_current14<64&&_current14>0&&_counter6>=0&&_counter6<8&&!_this.state.boardState[_current14].includes(\"white\")){if(!_this.state.blackControlledSquares.includes(_current14)){possibleMoves.push(_current14);}}}//castling\nif(_this.state.whiteKingHasMoved===false){if(_this.state.whiteHRookHasMoved===false){if(_this.state.boardState[60]===\"whiteKing\"&&_this.state.boardState[61]===\"\"&&_this.state.boardState[62]===\"\"&&_this.state.boardState[63]===\"whiteRook\"&&!_this.state.blackControlledSquares.includes(60)&&!_this.state.blackControlledSquares.includes(61)&&!_this.state.blackControlledSquares.includes(62)){possibleMoves.push(62);}}if(_this.state.whiteARookHasMoved===false){if(_this.state.boardState[60]===\"whiteKing\"&&_this.state.boardState[59]===\"\"&&_this.state.boardState[58]===\"\"&&_this.state.boardState[57]===\"\"&&_this.state.boardState[56]===\"whiteRook\"&&!_this.state.blackControlledSquares.includes(60)&&!_this.state.blackControlledSquares.includes(59)&&!_this.state.blackControlledSquares.includes(58)){possibleMoves.push(58);}}}_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;case\"blackKing\":if(_this.state.playerTurn===\"Black\"){for(var _movement17 in verticalPieceMovements){var _current16=location+verticalPieceMovements[_movement17];if(_current16<64&&_current16>0&&!_this.state.boardState[_current16].includes(\"black\")){if(!_this.state.whiteControlledSquares.includes(_current16)){possibleMoves.push(_current16);}}}var _iterator8=_createForOfIteratorHelper(horizontalPieceMovements),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var _movement19=_step8.value;var _current18=location+_movement19;if(!_this.state.boardState[_current18].includes(\"black\")&&Math.floor(_current18*.125)===Math.floor(location*.125)){if(!_this.state.whiteControlledSquares.includes(_current18)){possibleMoves.push(_current18);}}}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}for(var _movement18 in diagonalPieceMovements){var _current17=location+diagonalPieceMovements[_movement18];var _counter7=mod;_movement18%2===0?_counter7--:_counter7++;if(_current17<64&&_current17>0&&_counter7>=0&&_counter7<8&&!_this.state.boardState[_current17].includes(\"black\")){if(!_this.state.whiteControlledSquares.includes(_current17)){possibleMoves.push(_current17);}}}//castling\nif(_this.state.blackKingHasMoved===false){if(_this.state.blackHRookHasMoved===false){if(_this.state.boardState[4]===\"blackKing\"&&_this.state.boardState[5]===\"\"&&_this.state.boardState[6]===\"\"&&_this.state.boardState[7]===\"blackRook\"&&!_this.state.whiteControlledSquares.includes(4)&&!_this.state.whiteControlledSquares.includes(5)&&!_this.state.whiteControlledSquares.includes(6)){possibleMoves.push(6);}}if(_this.state.blackARookHasMoved===false){if(_this.state.boardState[4]===\"blackKing\"&&_this.state.boardState[3]===\"\"&&_this.state.boardState[2]===\"\"&&_this.state.boardState[1]===\"\"&&_this.state.boardState[0]===\"blackRook\"&&!_this.state.whiteControlledSquares.includes(4)&&!_this.state.whiteControlledSquares.includes(3)&&!_this.state.whiteControlledSquares.includes(2)){possibleMoves.push(2);}}}_this.setState({possibleMoves:_this.state.possibleMoves.map(function(value,index){if(possibleMoves.includes(index))return true;return false;})});console.log(possibleMoves);}break;default:}}};_this.clearMove=function(){if(_this.state.moveSelected===false){_this.setState({possibleMoves:new Array(64).fill(false)});}};_this.movePiece=function(currentPiece,position,squareName){//select piece\nif(_this.state.moveSelected===false&&_this.state.boardState[position]!==\"\"&&currentPiece.includes(_this.state.playerTurn.toLowerCase())){_this.setState({currentPiece:currentPiece,startingPosition:position,moveSelected:true});}else{//cancel move\nif(position===_this.state.startingPosition){_this.setState({currentPiece:\"\",startingPosition:-1,moveSelected:false});}//make move\nif(_this.state.possibleMoves[position]===true){if(_this.state.playerTurn.includes(\"White\")){_this.setState({playerTurn:\"Black\"});}else{_this.setState({playerTurn:\"White\"});}var pieceInitial='';if(_this.state.currentPiece.includes(\"Knight\")){pieceInitial=pieceInitial.concat('N');}else if(_this.state.currentPiece.includes(\"Bishop\")){pieceInitial=pieceInitial.concat('B');}else if(_this.state.currentPiece.includes(\"Rook\")){pieceInitial=pieceInitial.concat('R');}else if(_this.state.currentPiece.includes(\"Queen\")){pieceInitial=pieceInitial.concat('Q');}else if(_this.state.currentPiece.includes(\"King\")){pieceInitial=pieceInitial.concat('K');}//gives a row or column of the piece that is being moved if there is more than one of the same piece that can move to that square\n// if (!currentPiece.includes(\"Pawn\") && !currentPiece.includes(\"King\")) {\n//\n// }\n//adds an x to notation if a capture is made.\nif(_this.state.boardState[position]!==''||_this.state.possibleEnPassantSquare===position&&_this.state.currentPiece.includes(\"Pawn\")){if(_this.state.currentPiece.includes('Pawn')){var columns=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"];pieceInitial=columns[_this.state.startingPosition%8];}pieceInitial=pieceInitial.concat('x');}//sets en passant square for next turn.\nif(_this.state.currentPiece.includes('Pawn')&&(_this.state.startingPosition-16===position||_this.state.startingPosition+16===position)){if(_this.state.currentPiece.includes('white')){_this.setState({possibleEnPassantSquare:position+8});}else{_this.setState({possibleEnPassantSquare:position-8});}}else{_this.setState({possibleEnPassantSquare:\"\"});}//checks if move is castling\nif(_this.state.startingPosition===4&&position===2&&_this.state.currentPiece===\"blackKing\"){_this.setState({boardState:[\"\",\"\",\"blackKing\",\"blackRook\",\"\"].concat(_toConsumableArray(_this.state.boardState.slice(5))),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"O-O-O\"]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)});}else if(_this.state.startingPosition===4&&position===6&&_this.state.currentPiece===\"blackKing\"){_this.setState({boardState:[].concat(_toConsumableArray(_this.state.boardState.slice(0,4)),[\"\",\"blackRook\",\"blackKing\",\"\"],_toConsumableArray(_this.state.boardState.slice(8))),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"O-O\"]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)});}else if(_this.state.startingPosition===60&&position===58&&_this.state.currentPiece===\"whiteKing\"){_this.setState({boardState:[].concat(_toConsumableArray(_this.state.boardState.slice(0,56)),[\"\",\"\",\"whiteKing\",\"whiteRook\",\"\"],_toConsumableArray(_this.state.boardState.slice(61))),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"O-O-O\"]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)});}else if(_this.state.startingPosition===60&&position===62&&_this.state.currentPiece===\"whiteKing\"){_this.setState({boardState:[].concat(_toConsumableArray(_this.state.boardState.slice(0,60)),[\"\",\"whiteRook\",\"whiteKing\",\"\"]),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"O-O\"]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)//check for en passant captures\n});}else if(_this.state.currentPiece===\"whitePawn\"&&_this.state.possibleEnPassantSquare===position&&_this.state.startingPosition-7===position){//white capture to the right\n_this.setState({boardState:[].concat(_toConsumableArray(_this.state.boardState.slice(0,position)),[\"whitePawn\"],_toConsumableArray(_this.state.boardState.slice(position+1,position+7)),[\"\",\"\"],_toConsumableArray(_this.state.boardState.slice(position+9))),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"\".concat(pieceInitial).concat(squareName)]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)});}else if(_this.state.currentPiece===\"whitePawn\"&&_this.state.possibleEnPassantSquare===position&&_this.state.startingPosition-9===position){//white capture to the left\n_this.setState({boardState:[].concat(_toConsumableArray(_this.state.boardState.slice(0,position)),[\"whitePawn\"],_toConsumableArray(_this.state.boardState.slice(position+1,position+8)),[\"\",\"\"],_toConsumableArray(_this.state.boardState.slice(position+10))),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"\".concat(pieceInitial).concat(squareName)]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)});}else if(_this.state.currentPiece===\"blackPawn\"&&_this.state.possibleEnPassantSquare===position&&_this.state.startingPosition+7===position){//black capture to the left\n_this.setState({boardState:[].concat(_toConsumableArray(_this.state.boardState.slice(0,position-8)),[\"\",\"\"],_toConsumableArray(_this.state.boardState.slice(position-6,position)),[\"blackPawn\"],_toConsumableArray(_this.state.boardState.slice(position+1))),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"\".concat(pieceInitial).concat(squareName)]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)});}else if(_this.state.currentPiece===\"blackPawn\"&&_this.state.possibleEnPassantSquare===position&&_this.state.startingPosition+9===position){//black capture to the right\n_this.setState({boardState:[].concat(_toConsumableArray(_this.state.boardState.slice(0,position-9)),[\"\",\"\"],_toConsumableArray(_this.state.boardState.slice(position-7,position)),[\"blackPawn\"],_toConsumableArray(_this.state.boardState.slice(position+1))),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"\".concat(pieceInitial).concat(squareName)]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)});}else if(_this.state.startingPosition<position){//regular moves\n_this.setState({boardState:[].concat(_toConsumableArray(_this.state.boardState.slice(0,_this.state.startingPosition)),[\"\"],_toConsumableArray(_this.state.boardState.slice(_this.state.startingPosition+1,position)),[_this.state.currentPiece],_toConsumableArray(_this.state.boardState.slice(position+1))),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"\".concat(pieceInitial).concat(squareName)]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)});}else{_this.setState({boardState:[].concat(_toConsumableArray(_this.state.boardState.slice(0,position)),[_this.state.currentPiece],_toConsumableArray(_this.state.boardState.slice(position+1,_this.state.startingPosition)),[\"\"],_toConsumableArray(_this.state.boardState.slice(_this.state.startingPosition+1))),moveRecord:[].concat(_toConsumableArray(_this.state.moveRecord),[\"\".concat(pieceInitial).concat(squareName)]),currentPiece:\"\",startingPosition:-1,moveSelected:false,possibleMoves:new Array(64).fill(false)});}}}};_this.castlingConditions=function(){if(_this.state.boardState[0]!==\"blackRook\"&&_this.state.blackARookHasMoved===false){_this.setState({blackARookHasMoved:true});}if(_this.state.boardState[4]!==\"blackKing\"&&_this.state.blackKingHasMoved===false){_this.setState({blackKingHasMoved:true});}if(_this.state.boardState[7]!==\"blackRook\"&&_this.state.blackHRookHasMoved===false){_this.setState({blackHRookHasMoved:true});}if(_this.state.boardState[56]!==\"whiteRook\"&&_this.state.whiteARookHasMoved===false){_this.setState({whiteARookHasMoved:true});}if(_this.state.boardState[60]!==\"whiteKing\"&&_this.state.whiteKingHasMoved===false){_this.setState({whiteKingHasMoved:true});}if(_this.state.boardState[63]!==\"whiteRook\"&&_this.state.whiteHRookHasMoved===false){_this.setState({whiteHRookHasMoved:true});}};_this.checkSquaresControlled=function(){var possibleWhiteMoves=[];var possibleBlackMoves=[];for(var location=0;location<64;location++){var mod=location%8;var current=0;var verticalPieceMovements=[-8,8];var horizontalPieceMovements=[-1,1];var diagonalPieceMovements=[-9,-7,7,9];var knightPieceMovements=[-17,-15,-10,-6,6,10,15,17];switch(_this.state.boardState[location]){case\"whitePawn\":for(var i=0;i<2;i++){current=location+diagonalPieceMovements[i];var counter=mod;diagonalPieceMovements[i]%2===0?counter--:counter++;if(current<64&&current>0&&counter>=0&&counter<=8&&Math.floor((location-8)*.125)===Math.floor(current*.125)){possibleWhiteMoves.push(current);}}break;case\"blackPawn\":for(var _i2=2;_i2<4;_i2++){current=location+diagonalPieceMovements[_i2];var _counter8=mod;diagonalPieceMovements[_i2]%2===0?_counter8--:_counter8++;if(current<64&&current>0&&_counter8>=0&&_counter8<=8&&Math.floor((location+8)*.125)===Math.floor(current*.125)){possibleBlackMoves.push(current);}}break;case\"whiteKnight\":var _iterator9=_createForOfIteratorHelper(knightPieceMovements),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var movement=_step9.value;current=movement+location;if(current<64&&current>0){var spacesAway=0;if(movement===-15||movement===17)spacesAway=1;if(movement===-17||movement===15)spacesAway=-1;if(movement===-6||movement===10)spacesAway=2;if(movement===-10||movement===6)spacesAway=-2;if(Math.floor(location*.125)!==Math.floor((location+spacesAway)*.125))continue;if(_this.state.boardState[current].includes(\"white\"))continue;possibleWhiteMoves.push(current);}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}break;case\"blackKnight\":var _iterator10=_createForOfIteratorHelper(knightPieceMovements),_step10;try{for(_iterator10.s();!(_step10=_iterator10.n()).done;){var _movement20=_step10.value;current=_movement20+location;if(current<64&&current>0){var _spacesAway2=0;if(_movement20===-15||_movement20===17)_spacesAway2=1;if(_movement20===-17||_movement20===15)_spacesAway2=-1;if(_movement20===-6||_movement20===10)_spacesAway2=2;if(_movement20===-10||_movement20===6)_spacesAway2=-2;if(Math.floor(location*.125)!==Math.floor((location+_spacesAway2)*.125))continue;if(_this.state.boardState[current].includes(\"black\"))continue;possibleBlackMoves.push(current);}}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}break;case\"whiteBishop\":for(var _movement21 in diagonalPieceMovements){var _current19=location+diagonalPieceMovements[_movement21];var _counter9=mod;_movement21%2===0?_counter9--:_counter9++;while(_current19<64&&_current19>0&&_counter9>=0&&_counter9<8){if(_this.state.boardState[_current19].includes(\"white\"))break;possibleWhiteMoves.push(_current19);if(_this.state.boardState[_current19].includes(\"black\"))break;_current19+=diagonalPieceMovements[_movement21];_movement21%2===0?_counter9--:_counter9++;}}break;case\"blackBishop\":for(var _movement22 in diagonalPieceMovements){var _current20=location+diagonalPieceMovements[_movement22];var _counter10=mod;_movement22%2===0?_counter10--:_counter10++;while(_current20<64&&_current20>0&&_counter10>=0&&_counter10<8){if(_this.state.boardState[_current20].includes(\"black\"))break;possibleBlackMoves.push(_current20);if(_this.state.boardState[_current20].includes(\"white\"))break;_current20+=diagonalPieceMovements[_movement22];_movement22%2===0?_counter10--:_counter10++;}}break;case\"whiteRook\":for(var _movement23 in verticalPieceMovements){var _current21=location+verticalPieceMovements[_movement23];while(_current21<64&&_current21>0){if(_this.state.boardState[_current21].includes(\"white\"))break;possibleWhiteMoves.push(_current21);if(_this.state.boardState[_current21].includes(\"black\"))break;_current21+=verticalPieceMovements[_movement23];;}}var _iterator11=_createForOfIteratorHelper(horizontalPieceMovements),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var _movement24=_step11.value;var _current22=location+_movement24;if(_current22<0||_current22>63)continue;if(!_this.state.boardState[_current22].includes(\"white\")){while(Math.floor(_current22*.125)===Math.floor(location*.125)){possibleWhiteMoves.push(_current22);_current22+=_movement24;if(_current22>63||_current22<0)break;if(_this.state.boardState[_current22].includes(\"white\"))break;if(_this.state.boardState[_current22-_movement24].includes(\"black\"))break;}}}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}break;case\"blackRook\":for(var _movement25 in verticalPieceMovements){var _current23=location+verticalPieceMovements[_movement25];while(_current23<64&&_current23>0){if(_this.state.boardState[_current23].includes(\"black\"))break;possibleBlackMoves.push(_current23);if(_this.state.boardState[_current23].includes(\"white\"))break;_current23+=verticalPieceMovements[_movement25];;}}var _iterator12=_createForOfIteratorHelper(horizontalPieceMovements),_step12;try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){var _movement26=_step12.value;var _current24=location+_movement26;if(_current24<0||_current24>63)continue;if(!_this.state.boardState[_current24].includes(\"black\")){while(Math.floor(_current24*.125)===Math.floor(location*.125)){possibleBlackMoves.push(_current24);_current24+=_movement26;if(_current24>63||_current24<0)break;if(_this.state.boardState[_current24].includes(\"black\"))break;if(_this.state.boardState[_current24-_movement26].includes(\"white\"))break;}}}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}break;case\"whiteQueen\":for(var _movement27 in verticalPieceMovements){var _current25=location+verticalPieceMovements[_movement27];while(_current25<64&&_current25>0){if(_this.state.boardState[_current25].includes(\"white\"))break;possibleWhiteMoves.push(_current25);if(_this.state.boardState[_current25].includes(\"black\"))break;_current25+=verticalPieceMovements[_movement27];;}}var _iterator13=_createForOfIteratorHelper(horizontalPieceMovements),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var _movement29=_step13.value;var _current27=location+_movement29;if(!_this.state.boardState[_current27].includes(\"white\")){while(Math.floor(_current27*.125)===Math.floor(location*.125)){possibleWhiteMoves.push(_current27);_current27+=_movement29;if(_current27>63||_current27<0)break;if(_this.state.boardState[_current27].includes(\"white\"))break;if(_this.state.boardState[_current27-_movement29].includes(\"black\"))break;}}}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}for(var _movement28 in diagonalPieceMovements){var _current26=location+diagonalPieceMovements[_movement28];var _counter11=mod;_movement28%2===0?_counter11--:_counter11++;while(_current26<64&&_current26>0&&_counter11>=0&&_counter11<8){if(_this.state.boardState[_current26].includes(\"white\"))break;possibleWhiteMoves.push(_current26);if(_this.state.boardState[_current26].includes(\"black\"))break;_current26+=diagonalPieceMovements[_movement28];_movement28%2===0?_counter11--:_counter11++;}}break;case\"blackQueen\":for(var _movement30 in verticalPieceMovements){var _current28=location+verticalPieceMovements[_movement30];while(_current28<64&&_current28>0){if(_this.state.boardState[_current28].includes(\"black\"))break;possibleBlackMoves.push(_current28);if(_this.state.boardState[_current28].includes(\"white\"))break;_current28+=verticalPieceMovements[_movement30];;}}var _iterator14=_createForOfIteratorHelper(horizontalPieceMovements),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var _movement32=_step14.value;var _current30=location+_movement32;if(!_this.state.boardState[_current30].includes(\"black\")){while(Math.floor(_current30*.125)===Math.floor(location*.125)){possibleBlackMoves.push(_current30);_current30+=_movement32;if(_current30>63||_current30<0)break;if(_this.state.boardState[_current30].includes(\"black\"))break;if(_this.state.boardState[_current30-_movement32].includes(\"white\"))break;}}}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}for(var _movement31 in diagonalPieceMovements){var _current29=location+diagonalPieceMovements[_movement31];var _counter12=mod;_movement31%2===0?_counter12--:_counter12++;while(_current29<64&&_current29>0&&_counter12>=0&&_counter12<8){if(_this.state.boardState[_current29].includes(\"black\"))break;possibleBlackMoves.push(_current29);if(_this.state.boardState[_current29].includes(\"white\"))break;_current29+=diagonalPieceMovements[_movement31];_movement31%2===0?_counter12--:_counter12++;}}break;case\"whiteKing\":for(var _movement33 in verticalPieceMovements){var _current31=location+verticalPieceMovements[_movement33];if(_current31<64&&_current31>0&&!_this.state.boardState[_current31].includes(\"white\")){possibleWhiteMoves.push(_current31);}}var _iterator15=_createForOfIteratorHelper(horizontalPieceMovements),_step15;try{for(_iterator15.s();!(_step15=_iterator15.n()).done;){var _movement35=_step15.value;var _current33=location+_movement35;if(!_this.state.boardState[_current33].includes(\"white\")&&Math.floor(_current33*.125)===Math.floor(location*.125)){possibleWhiteMoves.push(_current33);}}}catch(err){_iterator15.e(err);}finally{_iterator15.f();}for(var _movement34 in diagonalPieceMovements){var _current32=location+diagonalPieceMovements[_movement34];var _counter13=mod;_movement34%2===0?_counter13--:_counter13++;if(_current32<64&&_current32>0&&_counter13>=0&&_counter13<8&&!_this.state.boardState[_current32].includes(\"white\")){possibleWhiteMoves.push(_current32);}}break;case\"blackKing\":for(var _movement36 in verticalPieceMovements){var _current34=location+verticalPieceMovements[_movement36];if(_current34<64&&_current34>0&&!_this.state.boardState[_current34].includes(\"black\")){possibleBlackMoves.push(_current34);}}var _iterator16=_createForOfIteratorHelper(horizontalPieceMovements),_step16;try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){var _movement38=_step16.value;var _current36=location+_movement38;if(!_this.state.boardState[_current36].includes(\"black\")&&Math.floor(_current36*.125)===Math.floor(location*.125)){possibleBlackMoves.push(_current36);}}}catch(err){_iterator16.e(err);}finally{_iterator16.f();}for(var _movement37 in diagonalPieceMovements){var _current35=location+diagonalPieceMovements[_movement37];var _counter14=mod;_movement37%2===0?_counter14--:_counter14++;if(_current35<64&&_current35>0&&_counter14>=0&&_counter14<8&&!_this.state.boardState[_current35].includes(\"black\")){possibleBlackMoves.push(_current35);}}break;default:}}possibleWhiteMoves=_toConsumableArray(new Set(possibleWhiteMoves));possibleBlackMoves=_toConsumableArray(new Set(possibleBlackMoves));_this.setState({whiteControlledSquares:_toConsumableArray(possibleWhiteMoves),blackControlledSquares:_toConsumableArray(possibleBlackMoves)});// console.log(possibleWhiteMoves)\n// console.log(possibleBlackMoves)\n};_this.checkIllegalMove=function(newSquare,location){var boardDuplicate=[];//how the board will look after move.\nif(_this.state.playerTurn===\"White\"){if(location>newSquare){boardDuplicate=[].concat(_toConsumableArray(_this.state.boardState.slice(0,newSquare)),[\"whitePawn\"],_toConsumableArray(_this.state.boardState.slice(newSquare+1,location)),[\"\"],_toConsumableArray(_this.state.boardState.slice(location+1)));}else{boardDuplicate=[].concat(_toConsumableArray(_this.state.boardState.slice(0,location)),[\"\"],_toConsumableArray(_this.state.boardState.slice(location+1,newSquare)),[\"whitePawn\"],_toConsumableArray(_this.state.boardState.slice(newSquare+1)));}}else{if(location>newSquare){boardDuplicate=[].concat(_toConsumableArray(_this.state.boardState.slice(0,newSquare)),[\"blackPawn\"],_toConsumableArray(_this.state.boardState.slice(newSquare+1,location)),[\"\"],_toConsumableArray(_this.state.boardState.slice(location+1)));}else{boardDuplicate=[].concat(_toConsumableArray(_this.state.boardState.slice(0,location)),[\"\"],_toConsumableArray(_this.state.boardState.slice(location+1,newSquare)),[\"blackPawn\"],_toConsumableArray(_this.state.boardState.slice(newSquare+1)));}}var possibleWhiteMoves=[];var possibleBlackMoves=[];var whiteKingPosition=-1;var blackKingPosition=-1;for(var _location=0;_location<64;_location++){var mod=_location%8;var current=0;var verticalPieceMovements=[-8,8];var horizontalPieceMovements=[-1,1];var diagonalPieceMovements=[-9,-7,7,9];var knightPieceMovements=[-17,-15,-10,-6,6,10,15,17];if(boardDuplicate[_location]===\"whiteKing\"){whiteKingPosition=_location;}if(boardDuplicate[_location]===\"blackKing\"){blackKingPosition=_location;}switch(boardDuplicate[_location]){case\"whitePawn\":for(var i=0;i<2;i++){current=_location+diagonalPieceMovements[i];var counter=mod;diagonalPieceMovements[i]%2===0?counter--:counter++;if(current<64&&current>0&&counter>=0&&counter<=8&&Math.floor((_location-8)*.125)===Math.floor(current*.125)){possibleWhiteMoves.push(current);}}break;case\"blackPawn\":for(var _i3=2;_i3<4;_i3++){current=_location+diagonalPieceMovements[_i3];var _counter15=mod;diagonalPieceMovements[_i3]%2===0?_counter15--:_counter15++;if(current<64&&current>0&&_counter15>=0&&_counter15<=8&&Math.floor((_location+8)*.125)===Math.floor(current*.125)){possibleBlackMoves.push(current);}}break;case\"whiteKnight\":var _iterator17=_createForOfIteratorHelper(knightPieceMovements),_step17;try{for(_iterator17.s();!(_step17=_iterator17.n()).done;){var movement=_step17.value;current=movement+_location;if(current<64&&current>0){var spacesAway=0;if(movement===-15||movement===17)spacesAway=1;if(movement===-17||movement===15)spacesAway=-1;if(movement===-6||movement===10)spacesAway=2;if(movement===-10||movement===6)spacesAway=-2;if(Math.floor(_location*.125)!==Math.floor((_location+spacesAway)*.125))continue;if(boardDuplicate[current].includes(\"white\"))continue;possibleWhiteMoves.push(current);}}}catch(err){_iterator17.e(err);}finally{_iterator17.f();}break;case\"blackKnight\":var _iterator18=_createForOfIteratorHelper(knightPieceMovements),_step18;try{for(_iterator18.s();!(_step18=_iterator18.n()).done;){var _movement39=_step18.value;current=_movement39+_location;if(current<64&&current>0){var _spacesAway3=0;if(_movement39===-15||_movement39===17)_spacesAway3=1;if(_movement39===-17||_movement39===15)_spacesAway3=-1;if(_movement39===-6||_movement39===10)_spacesAway3=2;if(_movement39===-10||_movement39===6)_spacesAway3=-2;if(Math.floor(_location*.125)!==Math.floor((_location+_spacesAway3)*.125))continue;if(boardDuplicate[current].includes(\"black\"))continue;possibleBlackMoves.push(current);}}}catch(err){_iterator18.e(err);}finally{_iterator18.f();}break;case\"whiteBishop\":for(var _movement40 in diagonalPieceMovements){var _current37=_location+diagonalPieceMovements[_movement40];var _counter16=mod;_movement40%2===0?_counter16--:_counter16++;while(_current37<64&&_current37>0&&_counter16>=0&&_counter16<8){if(boardDuplicate[_current37].includes(\"white\"))break;possibleWhiteMoves.push(_current37);if(boardDuplicate[_current37].includes(\"black\"))break;_current37+=diagonalPieceMovements[_movement40];_movement40%2===0?_counter16--:_counter16++;}}break;case\"blackBishop\":for(var _movement41 in diagonalPieceMovements){var _current38=_location+diagonalPieceMovements[_movement41];var _counter17=mod;_movement41%2===0?_counter17--:_counter17++;while(_current38<64&&_current38>0&&_counter17>=0&&_counter17<8){if(boardDuplicate[_current38].includes(\"black\"))break;possibleBlackMoves.push(_current38);if(boardDuplicate[_current38].includes(\"white\"))break;_current38+=diagonalPieceMovements[_movement41];_movement41%2===0?_counter17--:_counter17++;}}break;case\"whiteRook\":for(var _movement42 in verticalPieceMovements){var _current39=_location+verticalPieceMovements[_movement42];while(_current39<64&&_current39>0){if(boardDuplicate[_current39].includes(\"white\"))break;possibleWhiteMoves.push(_current39);if(boardDuplicate[_current39].includes(\"black\"))break;_current39+=verticalPieceMovements[_movement42];;}}var _iterator19=_createForOfIteratorHelper(horizontalPieceMovements),_step19;try{for(_iterator19.s();!(_step19=_iterator19.n()).done;){var _movement43=_step19.value;var _current40=_location+_movement43;if(_current40<0||_current40>63)continue;if(!boardDuplicate[_current40].includes(\"white\")){while(Math.floor(_current40*.125)===Math.floor(_location*.125)){possibleWhiteMoves.push(_current40);_current40+=_movement43;if(_current40>63||_current40<0)break;if(boardDuplicate[_current40].includes(\"white\"))break;if(boardDuplicate[_current40-_movement43].includes(\"black\"))break;}}}}catch(err){_iterator19.e(err);}finally{_iterator19.f();}break;case\"blackRook\":for(var _movement44 in verticalPieceMovements){var _current41=_location+verticalPieceMovements[_movement44];while(_current41<64&&_current41>0){if(boardDuplicate[_current41].includes(\"black\"))break;possibleBlackMoves.push(_current41);if(boardDuplicate[_current41].includes(\"white\"))break;_current41+=verticalPieceMovements[_movement44];;}}var _iterator20=_createForOfIteratorHelper(horizontalPieceMovements),_step20;try{for(_iterator20.s();!(_step20=_iterator20.n()).done;){var _movement45=_step20.value;var _current42=_location+_movement45;if(_current42<0||_current42>63)continue;if(!boardDuplicate[_current42].includes(\"black\")){while(Math.floor(_current42*.125)===Math.floor(_location*.125)){possibleBlackMoves.push(_current42);_current42+=_movement45;if(_current42>63||_current42<0)break;if(boardDuplicate[_current42].includes(\"black\"))break;if(boardDuplicate[_current42-_movement45].includes(\"white\"))break;}}}}catch(err){_iterator20.e(err);}finally{_iterator20.f();}break;case\"whiteQueen\":for(var _movement46 in verticalPieceMovements){var _current43=_location+verticalPieceMovements[_movement46];while(_current43<64&&_current43>0){if(boardDuplicate[_current43].includes(\"white\"))break;possibleWhiteMoves.push(_current43);if(boardDuplicate[_current43].includes(\"black\"))break;_current43+=verticalPieceMovements[_movement46];;}}var _iterator21=_createForOfIteratorHelper(horizontalPieceMovements),_step21;try{for(_iterator21.s();!(_step21=_iterator21.n()).done;){var _movement48=_step21.value;var _current45=_location+_movement48;if(!boardDuplicate[_current45].includes(\"white\")){while(Math.floor(_current45*.125)===Math.floor(_location*.125)){possibleWhiteMoves.push(_current45);_current45+=_movement48;if(_current45>63||_current45<0)break;if(boardDuplicate[_current45].includes(\"white\"))break;if(boardDuplicate[_current45-_movement48].includes(\"black\"))break;}}}}catch(err){_iterator21.e(err);}finally{_iterator21.f();}for(var _movement47 in diagonalPieceMovements){var _current44=_location+diagonalPieceMovements[_movement47];var _counter18=mod;_movement47%2===0?_counter18--:_counter18++;while(_current44<64&&_current44>0&&_counter18>=0&&_counter18<8){if(boardDuplicate[_current44].includes(\"white\"))break;possibleWhiteMoves.push(_current44);if(boardDuplicate[_current44].includes(\"black\"))break;_current44+=diagonalPieceMovements[_movement47];_movement47%2===0?_counter18--:_counter18++;}}break;case\"blackQueen\":for(var _movement49 in verticalPieceMovements){var _current46=_location+verticalPieceMovements[_movement49];while(_current46<64&&_current46>0){if(boardDuplicate[_current46].includes(\"black\"))break;possibleBlackMoves.push(_current46);if(boardDuplicate[_current46].includes(\"white\"))break;_current46+=verticalPieceMovements[_movement49];;}}var _iterator22=_createForOfIteratorHelper(horizontalPieceMovements),_step22;try{for(_iterator22.s();!(_step22=_iterator22.n()).done;){var _movement51=_step22.value;var _current48=_location+_movement51;if(!boardDuplicate[_current48].includes(\"black\")){while(Math.floor(_current48*.125)===Math.floor(_location*.125)){possibleBlackMoves.push(_current48);_current48+=_movement51;if(_current48>63||_current48<0)break;if(boardDuplicate[_current48].includes(\"black\"))break;if(boardDuplicate[_current48-_movement51].includes(\"white\"))break;}}}}catch(err){_iterator22.e(err);}finally{_iterator22.f();}for(var _movement50 in diagonalPieceMovements){var _current47=_location+diagonalPieceMovements[_movement50];var _counter19=mod;_movement50%2===0?_counter19--:_counter19++;while(_current47<64&&_current47>0&&_counter19>=0&&_counter19<8){if(boardDuplicate[_current47].includes(\"black\"))break;possibleBlackMoves.push(_current47);if(boardDuplicate[_current47].includes(\"white\"))break;_current47+=diagonalPieceMovements[_movement50];_movement50%2===0?_counter19--:_counter19++;}}break;case\"whiteKing\":for(var _movement52 in verticalPieceMovements){var _current49=_location+verticalPieceMovements[_movement52];if(_current49<64&&_current49>0&&!boardDuplicate[_current49].includes(\"white\")){possibleWhiteMoves.push(_current49);}}var _iterator23=_createForOfIteratorHelper(horizontalPieceMovements),_step23;try{for(_iterator23.s();!(_step23=_iterator23.n()).done;){var _movement54=_step23.value;var _current51=_location+_movement54;if(!boardDuplicate[_current51].includes(\"white\")&&Math.floor(_current51*.125)===Math.floor(_location*.125)){possibleWhiteMoves.push(_current51);}}}catch(err){_iterator23.e(err);}finally{_iterator23.f();}for(var _movement53 in diagonalPieceMovements){var _current50=_location+diagonalPieceMovements[_movement53];var _counter20=mod;_movement53%2===0?_counter20--:_counter20++;if(_current50<64&&_current50>0&&_counter20>=0&&_counter20<8&&!boardDuplicate[_current50].includes(\"white\")){possibleWhiteMoves.push(_current50);}}break;case\"blackKing\":for(var _movement55 in verticalPieceMovements){var _current52=_location+verticalPieceMovements[_movement55];if(_current52<64&&_current52>0&&!boardDuplicate[_current52].includes(\"black\")){possibleBlackMoves.push(_current52);}}var _iterator24=_createForOfIteratorHelper(horizontalPieceMovements),_step24;try{for(_iterator24.s();!(_step24=_iterator24.n()).done;){var _movement57=_step24.value;var _current54=_location+_movement57;if(!boardDuplicate[_current54].includes(\"black\")&&Math.floor(_current54*.125)===Math.floor(_location*.125)){possibleBlackMoves.push(_current54);}}}catch(err){_iterator24.e(err);}finally{_iterator24.f();}for(var _movement56 in diagonalPieceMovements){var _current53=_location+diagonalPieceMovements[_movement56];var _counter21=mod;_movement56%2===0?_counter21--:_counter21++;if(_current53<64&&_current53>0&&_counter21>=0&&_counter21<8&&!boardDuplicate[_current53].includes(\"black\")){possibleBlackMoves.push(_current53);}}break;default:}}possibleWhiteMoves=_toConsumableArray(new Set(possibleWhiteMoves));possibleBlackMoves=_toConsumableArray(new Set(possibleBlackMoves));if(_this.state.playerTurn===\"White\"&&possibleBlackMoves.includes(whiteKingPosition))return false;if(_this.state.playerTurn===\"Black\"&&possibleWhiteMoves.includes(blackKingPosition))return false;return true;};_this.state={colorGrid:[\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\",\"green\",\"white\"],boardState:[\"blackRook\",\"blackKnight\",\"blackBishop\",\"blackQueen\",\"blackKing\",\"blackBishop\",\"blackKnight\",\"blackRook\",\"blackPawn\",\"blackPawn\",\"blackPawn\",\"blackPawn\",\"blackPawn\",\"blackPawn\",\"blackPawn\",\"blackPawn\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"whitePawn\",\"whitePawn\",\"whitePawn\",\"whitePawn\",\"whitePawn\",\"whitePawn\",\"whitePawn\",\"whitePawn\",\"whiteRook\",\"whiteKnight\",\"whiteBishop\",\"whiteQueen\",\"whiteKing\",\"whiteBishop\",\"whiteKnight\",\"whiteRook\"],possibleMoves:new Array(64).fill(false),whiteControlledSquares:[],blackControlledSquares:[],moveRecord:[],moveSelected:false,currentPiece:\"\",startingPosition:-1,playerTurn:\"White\",possibleEnPassantSquare:\"\",whiteKingHasMoved:false,whiteARookHasMoved:false,whiteHRookHasMoved:false,blackKingHasMoved:false,blackARookHasMoved:false,blackHRookHasMoved:false};return _this;}_createClass(App,[{key:\"render\",value:function render(){var _this2=this;var board=this.state.colorGrid.map(function(value,index){return/*#__PURE__*/React.createElement(Square,{index:index,value:value,key:index,colorGrid:_this2.state.colorGrid,boardState:_this2.state.boardState,possibleMoves:_this2.state.possibleMoves,moveSelected:_this2.state.moveSelected,startingPosition:_this2.state.startingPosition,findSquares:_this2.findSquares,clearMove:_this2.clearMove,movePiece:_this2.movePiece});});var moveList=this.state.moveRecord.map(function(value){return/*#__PURE__*/React.createElement(\"div\",{className:\"column notationMoves\"},value);});return/*#__PURE__*/React.createElement(React.Fragment,null,this.castlingConditions(),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"column left\"},/*#__PURE__*/React.createElement(\"p\",null)),/*#__PURE__*/React.createElement(\"div\",{className:\"column middle\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"headerColumn\"},/*#__PURE__*/React.createElement(\"img\",{id:\"chessHeaderImage\",src:whitePawn,alt:\"White Pawn\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"headerColumn\"},/*#__PURE__*/React.createElement(\"img\",{id:\"chessHeaderImage\",src:blackKnight,alt:\"black Knight\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"headerColumn\"},/*#__PURE__*/React.createElement(\"img\",{id:\"chessHeaderImage\",src:whiteKing,alt:\"White King\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"headerColumn\"},/*#__PURE__*/React.createElement(\"h1\",null,\"CHESS\")),/*#__PURE__*/React.createElement(\"div\",{className:\"headerColumn\"},/*#__PURE__*/React.createElement(\"img\",{id:\"chessHeaderImage\",src:blackQueen,alt:\"Black Queen\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"headerColumn\"},/*#__PURE__*/React.createElement(\"img\",{id:\"chessHeaderImage\",src:whiteRook,alt:\"White Rook\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"headerColumn\"},/*#__PURE__*/React.createElement(\"img\",{id:\"chessHeaderImage\",src:blackBishop,alt:\"Black Bishop\"})))),/*#__PURE__*/React.createElement(\"div\",{className:\"column right\"},/*#__PURE__*/React.createElement(\"p\",null))),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"column\"},/*#__PURE__*/React.createElement(\"div\",{id:\"boardBackground\"},/*#__PURE__*/React.createElement(\"div\",{id:\"boardHolder\"},/*#__PURE__*/React.createElement(\"div\",{id:\"boardHolderTwo\"},board)))),/*#__PURE__*/React.createElement(\"div\",{className:\"column moves\"},/*#__PURE__*/React.createElement(\"div\",{id:\"moveBackground\"},/*#__PURE__*/React.createElement(\"h2\",null,\"\".concat(this.state.playerTurn,\" to move.\")),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},moveList)))));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/Chess-ThomasG/src/App.js"],"names":["React","Component","Square","whitePawn","whiteRook","whiteKing","blackKnight","blackBishop","blackQueen","App","props","findSquares","location","state","moveSelected","checkSquaresControlled","mod","current","possibleMoves","verticalPieceMovements","horizontalPieceMovements","diagonalPieceMovements","knightPieceMovements","boardState","playerTurn","includes","push","Math","floor","i","counter","possibleEnPassantSquare","filter","value","checkIllegalMove","setState","map","index","console","log","movement","spacesAway","blackControlledSquares","whiteKingHasMoved","whiteHRookHasMoved","whiteARookHasMoved","whiteControlledSquares","blackKingHasMoved","blackHRookHasMoved","blackARookHasMoved","clearMove","Array","fill","movePiece","currentPiece","position","squareName","toLowerCase","startingPosition","pieceInitial","concat","columns","slice","moveRecord","castlingConditions","possibleWhiteMoves","possibleBlackMoves","Set","newSquare","boardDuplicate","whiteKingPosition","blackKingPosition","colorGrid","board","moveList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport whitePawn from './images/Chess_plt60.png'\nimport whiteRook from './images/Chess_rlt60.png'\nimport whiteKing from './images/Chess_klt60.png'\nimport blackKnight from './images/Chess_ndt60.png'\nimport blackBishop from './images/Chess_bdt60.png'\nimport blackQueen from './images/Chess_qdt60.png'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"blackRook\", \"blackKnight\", \"blackBishop\", \"blackQueen\", \"blackKing\", \"blackBishop\", \"blackKnight\", \"blackRook\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whiteRook\", \"whiteKnight\", \"whiteBishop\", \"whiteQueen\", \"whiteKing\", \"whiteBishop\", \"whiteKnight\", \"whiteRook\"],\n      possibleMoves: new Array(64).fill(false),\n      whiteControlledSquares: [],\n      blackControlledSquares: [],\n      moveRecord: [],\n      moveSelected: false,\n      currentPiece: \"\",\n      startingPosition: -1,\n      playerTurn: \"White\",\n      possibleEnPassantSquare: \"\",\n      whiteKingHasMoved: false,\n      whiteARookHasMoved: false,\n      whiteHRookHasMoved: false,\n      blackKingHasMoved: false,\n      blackARookHasMoved: false,\n      blackHRookHasMoved: false\n    }\n  }\n\n  findSquares = (location) => {\n    if (this.state.moveSelected === false) {\n      this.checkSquaresControlled()\n      let mod = location % 8;\n      let current = 0;\n      let possibleMoves = [];\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n      let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17]\n      switch (this.state.boardState[location]) {\n        case \"whitePawn\":\n          if (this.state.playerTurn === \"White\")  {\n            current = location - 8;\n            if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n              possibleMoves.push(current);\n              if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\"))  {\n                possibleMoves.push(current - 8);\n              }\n            }\n\n            for (let i = 0; i < 2; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"black\") || current === this.state.possibleEnPassantSquare) && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"blackPawn\":\n          if (this.state.playerTurn === \"Black\")  {\n            current = location + 8;\n            if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n              possibleMoves.push(current);\n              if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\"))  {\n                possibleMoves.push(current + 8);\n              }\n            }\n\n            for (let i = 2; i < 4; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"white\") || current === this.state.possibleEnPassantSquare) && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"whiteKnight\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"white\")) continue;\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"blackKnight\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"black\")) continue;\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"whiteBishop\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n              this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n                if (possibleMoves.includes(index))  return true;\n                return false;\n              })})\n\n            console.log(possibleMoves)\n          }\n        break;\n\n        case \"blackBishop\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n              this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n                if (possibleMoves.includes(index))  return true;\n                return false;\n              })})\n\n            console.log(possibleMoves)\n          }\n        break;\n\n        case \"whiteRook\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n              if (possibleMoves.includes(index))  return true;\n              return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n\n        case \"blackRook\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n               this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n                 if (possibleMoves.includes(index))  return true;\n                 return false;\n               })})\n\n              console.log( possibleMoves )\n            }\n          break;\n        case \"whiteQueen\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"blackQueen\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"whiteKing\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\"))  {\n                if (!this.state.blackControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                if (!this.state.blackControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n                if (!this.state.blackControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            //castling\n            if (this.state.whiteKingHasMoved === false) {\n              if (this.state.whiteHRookHasMoved === false)  {\n                if (this.state.boardState[60] === \"whiteKing\" && this.state.boardState[61] === \"\" && this.state.boardState[62] === \"\" && this.state.boardState[63] === \"whiteRook\" && (!this.state.blackControlledSquares.includes(60) && !this.state.blackControlledSquares.includes(61) && !this.state.blackControlledSquares.includes(62))) {\n                  possibleMoves.push(62)\n                }\n              }\n              if (this.state.whiteARookHasMoved === false)  {\n                if (this.state.boardState[60] === \"whiteKing\" && this.state.boardState[59] === \"\" && this.state.boardState[58] === \"\" && this.state.boardState[57] === \"\" && this.state.boardState[56] === \"whiteRook\" && (!this.state.blackControlledSquares.includes(60) && !this.state.blackControlledSquares.includes(59) && !this.state.blackControlledSquares.includes(58))) {\n                  possibleMoves.push(58)\n                }\n              }\n            }\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"blackKing\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\"))  {\n                if (!this.state.whiteControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                if (!this.state.whiteControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n                if (!this.state.whiteControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            //castling\n            if (this.state.blackKingHasMoved === false) {\n              if (this.state.blackHRookHasMoved === false)  {\n                if (this.state.boardState[4] === \"blackKing\" && this.state.boardState[5] === \"\" && this.state.boardState[6] === \"\" && this.state.boardState[7] === \"blackRook\" && (!this.state.whiteControlledSquares.includes(4) && !this.state.whiteControlledSquares.includes(5) && !this.state.whiteControlledSquares.includes(6))) {\n                  possibleMoves.push(6)\n                }\n              }\n              if (this.state.blackARookHasMoved === false)  {\n                if (this.state.boardState[4] === \"blackKing\" && this.state.boardState[3] === \"\" && this.state.boardState[2] === \"\" && this.state.boardState[1] === \"\" && this.state.boardState[0] === \"blackRook\" && (!this.state.whiteControlledSquares.includes(4) && !this.state.whiteControlledSquares.includes(3) && !this.state.whiteControlledSquares.includes(2))) {\n                  possibleMoves.push(2)\n                }\n              }\n            }\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        default:\n      }\n    }\n  }\n\n  clearMove = () => {\n    if (this.state.moveSelected === false)  {\n      this.setState({ possibleMoves: new Array(64).fill(false) })\n    }\n  }\n\n  movePiece = (currentPiece, position, squareName) => {\n    //select piece\n    if (this.state.moveSelected === false && this.state.boardState[position] !== \"\" && currentPiece.includes(this.state.playerTurn.toLowerCase()))  {\n      this.setState({\n      currentPiece: currentPiece,\n      startingPosition: position,\n      moveSelected: true,\n    })} else {\n        //cancel move\n        if (position === this.state.startingPosition)  {\n          this.setState({\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n          })\n        }\n        //make move\n        if (this.state.possibleMoves[position] === true) {\n          if (this.state.playerTurn.includes(\"White\")) {\n            this.setState({ playerTurn: \"Black\"})\n          } else {\n            this.setState({ playerTurn: \"White\"})\n          }\n          let pieceInitial = ''\n          if (this.state.currentPiece.includes(\"Knight\")) {\n            pieceInitial = pieceInitial.concat('N')\n          } else if (this.state.currentPiece.includes(\"Bishop\")) {\n            pieceInitial = pieceInitial.concat('B')\n          } else if (this.state.currentPiece.includes(\"Rook\")) {\n            pieceInitial = pieceInitial.concat('R')\n          } else if (this.state.currentPiece.includes(\"Queen\")) {\n            pieceInitial = pieceInitial.concat('Q')\n          } else if (this.state.currentPiece.includes(\"King\")) {\n            pieceInitial = pieceInitial.concat('K')\n          }\n\n          //gives a row or column of the piece that is being moved if there is more than one of the same piece that can move to that square\n          // if (!currentPiece.includes(\"Pawn\") && !currentPiece.includes(\"King\")) {\n          //\n          // }\n\n          //adds an x to notation if a capture is made.\n          if (this.state.boardState[position] !== '' || (this.state.possibleEnPassantSquare === position && this.state.currentPiece.includes(\"Pawn\")))  {\n            if (this.state.currentPiece.includes('Pawn')) {\n              let columns = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n              pieceInitial = columns[this.state.startingPosition % 8]\n            }\n            pieceInitial = pieceInitial.concat('x')\n          }\n\n          //sets en passant square for next turn.\n            if (this.state.currentPiece.includes('Pawn') && (this.state.startingPosition - 16 === position || this.state.startingPosition + 16 === position)){\n              if (this.state.currentPiece.includes('white'))  {\n                this.setState({ possibleEnPassantSquare: position + 8})\n              } else {\n                this.setState({ possibleEnPassantSquare: position - 8})\n              }\n            } else {\n              this.setState({ possibleEnPassantSquare: \"\"})\n            }\n          //checks if move is castling\n          if (this.state.startingPosition === 4 && position === 2 && this.state.currentPiece === \"blackKing\") {\n            this.setState({\n            boardState: [\"\", \"\", \"blackKing\", \"blackRook\", \"\", ...this.state.boardState.slice(5)],\n            moveRecord: [...this.state.moveRecord, \"O-O-O\"],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n          })} else if (this.state.startingPosition === 4 && position === 6 && this.state.currentPiece === \"blackKing\") {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,4), \"\", \"blackRook\", \"blackKing\", \"\", ...this.state.boardState.slice(8)],\n            moveRecord: [...this.state.moveRecord, \"O-O\"],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n          })} else if (this.state.startingPosition === 60 && position === 58 && this.state.currentPiece === \"whiteKing\") {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,56), \"\", \"\", \"whiteKing\", \"whiteRook\", \"\", ...this.state.boardState.slice(61)],\n            moveRecord: [...this.state.moveRecord, \"O-O-O\"],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n          })} else if (this.state.startingPosition === 60 && position === 62 && this.state.currentPiece === \"whiteKing\") {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,60), \"\", \"whiteRook\", \"whiteKing\", \"\"],\n            moveRecord: [...this.state.moveRecord, \"O-O\"],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            //check for en passant captures\n          })} else if ((this.state.currentPiece === \"whitePawn\") && this.state.possibleEnPassantSquare === position && this.state.startingPosition - 7 === position) {\n            //white capture to the right\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position), \"whitePawn\", ...this.state.boardState.slice(position + 1, position + 7), \"\", \"\", ...this.state.boardState.slice(position + 9)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n          })} else if ((this.state.currentPiece === \"whitePawn\") && this.state.possibleEnPassantSquare === position && this.state.startingPosition - 9 === position) {\n            //white capture to the left\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position), \"whitePawn\", ...this.state.boardState.slice(position + 1, position + 8), \"\", \"\", ...this.state.boardState.slice(position + 10)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n          })} else if ((this.state.currentPiece === \"blackPawn\") && this.state.possibleEnPassantSquare === position && this.state.startingPosition + 7 === position) {\n            //black capture to the left\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position - 8), \"\", \"\", ...this.state.boardState.slice(position - 6, position), \"blackPawn\", ...this.state.boardState.slice(position + 1)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n          })} else if ((this.state.currentPiece === \"blackPawn\") && this.state.possibleEnPassantSquare === position && this.state.startingPosition + 9 === position) {\n            //black capture to the right\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position - 9), \"\", \"\", ...this.state.boardState.slice(position - 7, position), \"blackPawn\", ...this.state.boardState.slice(position + 1)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n          })} else if (this.state.startingPosition < position) {\n            //regular moves\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n          })} else {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position), this.state.currentPiece, ...this.state.boardState.slice(position + 1, this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false)\n          })\n          }\n        }\n    }\n  }\n\n  castlingConditions = () => {\n    if (this.state.boardState[0] !== \"blackRook\" && this.state.blackARookHasMoved === false) {\n      this.setState({ blackARookHasMoved: true })\n    }\n    if (this.state.boardState[4] !== \"blackKing\" && this.state.blackKingHasMoved === false) {\n      this.setState({ blackKingHasMoved: true })\n    }\n    if (this.state.boardState[7] !== \"blackRook\" && this.state.blackHRookHasMoved === false) {\n      this.setState({ blackHRookHasMoved: true })\n    }\n    if (this.state.boardState[56] !== \"whiteRook\" && this.state.whiteARookHasMoved === false) {\n      this.setState({ whiteARookHasMoved: true })\n    }\n    if (this.state.boardState[60] !== \"whiteKing\" && this.state.whiteKingHasMoved === false) {\n      this.setState({ whiteKingHasMoved: true })\n    }\n    if (this.state.boardState[63] !== \"whiteRook\" && this.state.whiteHRookHasMoved === false) {\n      this.setState({ whiteHRookHasMoved: true })\n    }\n  }\n\n  checkSquaresControlled = () => {\n    let possibleWhiteMoves = [];\n    let possibleBlackMoves = [];\n    for (let location = 0; location < 64; location++) {\n      let mod = location % 8;\n      let current = 0;\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n      let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17]\n      switch (this.state.boardState[location]) {\n        case \"whitePawn\":\n            for (let i = 0; i < 2; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n        break;\n        case \"blackPawn\":\n            for (let i = 2; i < 4; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                possibleBlackMoves.push(current);\n              }\n            }\n        break;\n        case \"whiteKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"white\")) continue;\n                possibleWhiteMoves.push(current);\n              }\n            }\n        break;\n        case \"blackKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"black\")) continue;\n                possibleBlackMoves.push(current);\n              }\n            }\n        break;\n        case \"whiteBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n        break;\n\n        case \"blackBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n        break;\n\n        case \"whiteRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleWhiteMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n        break;\n\n        case \"blackRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleBlackMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n          break;\n        case \"whiteQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleWhiteMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n        break;\n        case \"blackQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleBlackMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n        break;\n        case \"whiteKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\"))  {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleWhiteMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n        break;\n        case \"blackKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\"))  {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleBlackMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n                possibleBlackMoves.push(current);\n              }\n            }\n        break;\n        default:\n      }\n    }\n    possibleWhiteMoves = [...new Set(possibleWhiteMoves)]\n    possibleBlackMoves = [...new Set(possibleBlackMoves)]\n\n     this.setState({\n       whiteControlledSquares: [...possibleWhiteMoves],\n       blackControlledSquares: [...possibleBlackMoves]\n     })\n     // console.log(possibleWhiteMoves)\n     // console.log(possibleBlackMoves)\n  }\n\n  checkIllegalMove = (newSquare, location) => {\n      let boardDuplicate = []\n      //how the board will look after move.\n      if (this.state.playerTurn === \"White\") {\n        if (location > newSquare) {\n        boardDuplicate = [...this.state.boardState.slice(0,newSquare), \"whitePawn\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)]\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0,location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"whitePawn\", ...this.state.boardState.slice(newSquare + 1)]\n        }\n      } else {\n        if (location > newSquare) {\n        boardDuplicate = [...this.state.boardState.slice(0,newSquare), \"blackPawn\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)]\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0,location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"blackPawn\", ...this.state.boardState.slice(newSquare + 1)]\n        }\n      }\n      let possibleWhiteMoves = [];\n      let possibleBlackMoves = [];\n      let whiteKingPosition = -1;\n      let blackKingPosition = -1;\n      for (let location = 0; location < 64; location++) {\n        let mod = location % 8;\n        let current = 0;\n        let verticalPieceMovements = [-8, 8];\n        let horizontalPieceMovements = [-1, 1];\n        let diagonalPieceMovements = [-9, -7, 7, 9];\n        let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17]\n        if (boardDuplicate[location] === \"whiteKing\") {\n          whiteKingPosition = location;\n        }\n        if (boardDuplicate[location] === \"blackKing\") {\n          blackKingPosition = location;\n        }\n        switch (boardDuplicate[location]) {\n          case \"whitePawn\":\n              for (let i = 0; i < 2; i++) {\n                current = location + diagonalPieceMovements[i];\n                let counter = mod;\n                diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n                if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                  possibleWhiteMoves.push(current);\n                }\n              }\n          break;\n          case \"blackPawn\":\n              for (let i = 2; i < 4; i++) {\n                current = location + diagonalPieceMovements[i];\n                let counter = mod;\n                diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n                if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                  possibleBlackMoves.push(current);\n                }\n              }\n          break;\n          case \"whiteKnight\":\n              for (let movement of knightPieceMovements) {\n                current = movement + location\n                if (current < 64 && current > 0) {\n                  let spacesAway = 0;\n                  if (movement === -15 || movement === 17) spacesAway = 1;\n                  if (movement === -17 || movement === 15) spacesAway = -1;\n                  if (movement === -6 || movement === 10) spacesAway = 2;\n                  if (movement === -10 || movement === 6) spacesAway = -2;\n                  if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                  if (boardDuplicate[current].includes(\"white\")) continue;\n                  possibleWhiteMoves.push(current);\n                }\n              }\n          break;\n          case \"blackKnight\":\n              for (let movement of knightPieceMovements) {\n                current = movement + location\n                if (current < 64 && current > 0) {\n                  let spacesAway = 0;\n                  if (movement === -15 || movement === 17) spacesAway = 1;\n                  if (movement === -17 || movement === 15) spacesAway = -1;\n                  if (movement === -6 || movement === 10) spacesAway = 2;\n                  if (movement === -10 || movement === 6) spacesAway = -2;\n                  if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                  if (boardDuplicate[current].includes(\"black\")) continue;\n                  possibleBlackMoves.push(current);\n                }\n              }\n          break;\n          case \"whiteBishop\":\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  possibleWhiteMoves.push(current);\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n          break;\n\n          case \"blackBishop\":\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  possibleBlackMoves.push(current);\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n          break;\n\n          case \"whiteRook\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                while (current < 64 && current > 0)  {\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  possibleWhiteMoves.push(current);\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  current += verticalPieceMovements[movement];;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (current < 0 || current > 63) continue;\n                if (!boardDuplicate[current].includes(\"white\"))  {\n                  while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleWhiteMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0)  break;\n                    if (boardDuplicate[current].includes(\"white\"))  break;\n                    if (boardDuplicate[current - movement].includes(\"black\"))  break;\n                  }\n                }\n              }\n          break;\n\n          case \"blackRook\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                while (current < 64 && current > 0)  {\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  possibleBlackMoves.push(current);\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  current += verticalPieceMovements[movement];;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (current < 0 || current > 63) continue;\n                if (!boardDuplicate[current].includes(\"black\"))  {\n                  while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleBlackMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0)  break;\n                    if (boardDuplicate[current].includes(\"black\"))  break;\n                    if (boardDuplicate[current - movement].includes(\"white\"))  break;\n                  }\n                }\n              }\n            break;\n          case \"whiteQueen\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                while (current < 64 && current > 0)  {\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  possibleWhiteMoves.push(current);\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  current += verticalPieceMovements[movement];;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (!boardDuplicate[current].includes(\"white\"))  {\n                  while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleWhiteMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0)  break;\n                    if (boardDuplicate[current].includes(\"white\"))  break;\n                    if (boardDuplicate[current - movement].includes(\"black\"))  break;\n                  }\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  possibleWhiteMoves.push(current);\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n          break;\n          case \"blackQueen\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                while (current < 64 && current > 0)  {\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  possibleBlackMoves.push(current);\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  current += verticalPieceMovements[movement];;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (!boardDuplicate[current].includes(\"black\"))  {\n                  while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleBlackMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0)  break;\n                    if (boardDuplicate[current].includes(\"black\"))  break;\n                    if (boardDuplicate[current - movement].includes(\"white\"))  break;\n                  }\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  possibleBlackMoves.push(current);\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n          break;\n          case \"whiteKing\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                if (current < 64 && current > 0 && !boardDuplicate[current].includes(\"white\"))  {\n                  possibleWhiteMoves.push(current);\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (!boardDuplicate[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleWhiteMoves.push(current);\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !boardDuplicate[current].includes(\"white\")) {\n                  possibleWhiteMoves.push(current);\n                }\n              }\n          break;\n          case \"blackKing\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                if (current < 64 && current > 0 && !boardDuplicate[current].includes(\"black\"))  {\n                  possibleBlackMoves.push(current);\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (!boardDuplicate[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleBlackMoves.push(current);\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !boardDuplicate[current].includes(\"black\")) {\n                  possibleBlackMoves.push(current);\n                }\n              }\n          break;\n          default:\n        }\n      }\n      possibleWhiteMoves = [...new Set(possibleWhiteMoves)]\n      possibleBlackMoves = [...new Set(possibleBlackMoves)]\n\n      if (this.state.playerTurn === \"White\" && possibleBlackMoves.includes(whiteKingPosition)) return false;\n      if (this.state.playerTurn === \"Black\" && possibleWhiteMoves.includes(blackKingPosition)) return false;\n      return true;\n  }\n\n  render(){\n    let board = this.state.colorGrid.map((value,index)=> {\n      return (\n        <Square\n          index = { index }\n          value = { value }\n          key = { index }\n          colorGrid = { this.state.colorGrid }\n          boardState = { this.state.boardState }\n          possibleMoves = { this.state.possibleMoves }\n          moveSelected = { this.state.moveSelected }\n          startingPosition = { this.state.startingPosition }\n          findSquares = { this.findSquares }\n          clearMove = { this.clearMove }\n          movePiece = { this.movePiece }\n        />\n      )\n    })\n    let moveList = this.state.moveRecord.map((value) => {\n      return (\n        <div className=\"column notationMoves\">{ value }</div>\n      )\n    })\n    return(\n      <React.Fragment>\n        { this.castlingConditions() }\n        <div className=\"row\">\n          <div className=\"column left\">\n          <p></p>\n          </div>\n          <div className=\"column middle\">\n            <div className=\"row\">\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { whitePawn } alt=\"White Pawn\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { blackKnight } alt=\"black Knight\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { whiteKing } alt=\"White King\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <h1>CHESS</h1>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { blackQueen } alt=\"Black Queen\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { whiteRook } alt=\"White Rook\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { blackBishop } alt=\"Black Bishop\"/>\n              </div>\n            </div>\n          </div>\n          <div className=\"column right\">\n          <p></p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"column\">\n            <div id = \"boardBackground\">\n              <div id = \"boardHolder\">\n                <div id = \"boardHolderTwo\">\n                  { board }\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"column moves\">\n            <div id= \"moveBackground\">\n              <h2>{`${this.state.playerTurn} to move.`}</h2>\n              <div className=\"row\">\n                { moveList }\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}