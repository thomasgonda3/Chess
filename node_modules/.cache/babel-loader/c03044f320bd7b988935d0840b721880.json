{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/Chess-ThomasG/src/App.js\";\nimport React, { Component } from 'react';\nimport Square from './components/Square';\nimport whitePawn from './images/Chess_plt60.png';\nimport whiteRook from './images/Chess_rlt60.png';\nimport whiteKing from './images/Chess_klt60.png';\nimport blackKnight from './images/Chess_ndt60.png';\nimport blackBishop from './images/Chess_bdt60.png';\nimport blackQueen from './images/Chess_qdt60.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.findSquares = location => {\n      if (this.state.moveSelected === false) {\n        this.checkSquaresControlled();\n        let mod = location % 8;\n        let current = 0;\n        let possibleMoves = [];\n        let verticalPieceMovements = [-8, 8];\n        let horizontalPieceMovements = [-1, 1];\n        let diagonalPieceMovements = [-9, -7, 7, 9];\n        let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17];\n\n        switch (this.state.boardState[location]) {\n          case \"whitePawn\":\n            if (this.state.playerTurn === \"White\") {\n              current = location - 8;\n\n              if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n                possibleMoves.push(current);\n\n                if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\")) {\n                  possibleMoves.push(current - 8);\n                }\n              }\n\n              for (let i = 0; i < 2; i++) {\n                current = location + diagonalPieceMovements[i];\n                let counter = mod;\n                diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n                if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"black\") || current === this.state.possibleEnPassantSquare) && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                  possibleMoves.push(current);\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"blackPawn\":\n            if (this.state.playerTurn === \"Black\") {\n              current = location + 8;\n\n              if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n                possibleMoves.push(current);\n\n                if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\")) {\n                  possibleMoves.push(current + 8);\n                }\n              }\n\n              for (let i = 2; i < 4; i++) {\n                current = location + diagonalPieceMovements[i];\n                let counter = mod;\n                diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n                if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"white\") || current === this.state.possibleEnPassantSquare) && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                  possibleMoves.push(current);\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"whiteKnight\":\n            if (this.state.playerTurn === \"White\") {\n              for (let movement of knightPieceMovements) {\n                current = movement + location;\n\n                if (current < 64 && current > 0) {\n                  let spacesAway = 0;\n                  if (movement === -15 || movement === 17) spacesAway = 1;\n                  if (movement === -17 || movement === 15) spacesAway = -1;\n                  if (movement === -6 || movement === 10) spacesAway = 2;\n                  if (movement === -10 || movement === 6) spacesAway = -2;\n                  if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                  if (this.state.boardState[current].includes(\"white\")) continue;\n                  possibleMoves.push(current);\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"blackKnight\":\n            if (this.state.playerTurn === \"Black\") {\n              for (let movement of knightPieceMovements) {\n                current = movement + location;\n\n                if (current < 64 && current > 0) {\n                  let spacesAway = 0;\n                  if (movement === -15 || movement === 17) spacesAway = 1;\n                  if (movement === -17 || movement === 15) spacesAway = -1;\n                  if (movement === -6 || movement === 10) spacesAway = 2;\n                  if (movement === -10 || movement === 6) spacesAway = -2;\n                  if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                  if (this.state.boardState[current].includes(\"black\")) continue;\n                  possibleMoves.push(current);\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"whiteBishop\":\n            if (this.state.playerTurn === \"White\") {\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  possibleMoves.push(current);\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"blackBishop\":\n            if (this.state.playerTurn === \"Black\") {\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  possibleMoves.push(current);\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"whiteRook\":\n            if (this.state.playerTurn === \"White\") {\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n\n                while (current < 64 && current > 0) {\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  possibleMoves.push(current);\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  current += verticalPieceMovements[movement];\n                  ;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements) {\n                let current = location + movement;\n                if (current < 0 || current > 63) continue;\n\n                if (!this.state.boardState[current].includes(\"white\")) {\n                  while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                    possibleMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0) break;\n                    if (this.state.boardState[current].includes(\"white\")) break;\n                    if (this.state.boardState[current - movement].includes(\"black\")) break;\n                  }\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"blackRook\":\n            if (this.state.playerTurn === \"Black\") {\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n\n                while (current < 64 && current > 0) {\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  possibleMoves.push(current);\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  current += verticalPieceMovements[movement];\n                  ;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements) {\n                let current = location + movement;\n                if (current < 0 || current > 63) continue;\n\n                if (!this.state.boardState[current].includes(\"black\")) {\n                  while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                    possibleMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0) break;\n                    if (this.state.boardState[current].includes(\"black\")) break;\n                    if (this.state.boardState[current - movement].includes(\"white\")) break;\n                  }\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"whiteQueen\":\n            if (this.state.playerTurn === \"White\") {\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n\n                while (current < 64 && current > 0) {\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  possibleMoves.push(current);\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  current += verticalPieceMovements[movement];\n                  ;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements) {\n                let current = location + movement;\n\n                if (!this.state.boardState[current].includes(\"white\")) {\n                  while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                    possibleMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0) break;\n                    if (this.state.boardState[current].includes(\"white\")) break;\n                    if (this.state.boardState[current - movement].includes(\"black\")) break;\n                  }\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  possibleMoves.push(current);\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"blackQueen\":\n            if (this.state.playerTurn === \"Black\") {\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n\n                while (current < 64 && current > 0) {\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  possibleMoves.push(current);\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  current += verticalPieceMovements[movement];\n                  ;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements) {\n                let current = location + movement;\n\n                if (!this.state.boardState[current].includes(\"black\")) {\n                  while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                    possibleMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0) break;\n                    if (this.state.boardState[current].includes(\"black\")) break;\n                    if (this.state.boardState[current - movement].includes(\"white\")) break;\n                  }\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  possibleMoves.push(current);\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"whiteKing\":\n            if (this.state.playerTurn === \"White\") {\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n\n                if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\")) {\n                  if (!this.state.blackControlledSquares.includes(current)) {\n                    possibleMoves.push(current);\n                  }\n                }\n              }\n\n              for (let movement of horizontalPieceMovements) {\n                let current = location + movement;\n\n                if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n                  if (!this.state.blackControlledSquares.includes(current)) {\n                    possibleMoves.push(current);\n                  }\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n\n                if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n                  if (!this.state.blackControlledSquares.includes(current)) {\n                    possibleMoves.push(current);\n                  }\n                }\n              } //castling\n\n\n              if (this.state.whiteKingHasMoved === false) {\n                if (this.state.whiteHRookHasMoved === false) {\n                  if (this.state.boardState[60] === \"whiteKing\" && this.state.boardState[61] === \"\" && this.state.boardState[62] === \"\" && this.state.boardState[63] === \"whiteRook\" && !this.state.blackControlledSquares.includes(60) && !this.state.blackControlledSquares.includes(61) && !this.state.blackControlledSquares.includes(62)) {\n                    possibleMoves.push(62);\n                  }\n                }\n\n                if (this.state.whiteARookHasMoved === false) {\n                  if (this.state.boardState[60] === \"whiteKing\" && this.state.boardState[59] === \"\" && this.state.boardState[58] === \"\" && this.state.boardState[57] === \"\" && this.state.boardState[56] === \"whiteRook\" && !this.state.blackControlledSquares.includes(60) && !this.state.blackControlledSquares.includes(59) && !this.state.blackControlledSquares.includes(58)) {\n                    possibleMoves.push(58);\n                  }\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          case \"blackKing\":\n            if (this.state.playerTurn === \"Black\") {\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n\n                if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\")) {\n                  if (!this.state.whiteControlledSquares.includes(current)) {\n                    possibleMoves.push(current);\n                  }\n                }\n              }\n\n              for (let movement of horizontalPieceMovements) {\n                let current = location + movement;\n\n                if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n                  if (!this.state.whiteControlledSquares.includes(current)) {\n                    possibleMoves.push(current);\n                  }\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n\n                if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n                  if (!this.state.whiteControlledSquares.includes(current)) {\n                    possibleMoves.push(current);\n                  }\n                }\n              } //castling\n\n\n              if (this.state.blackKingHasMoved === false) {\n                if (this.state.blackHRookHasMoved === false) {\n                  if (this.state.boardState[4] === \"blackKing\" && this.state.boardState[5] === \"\" && this.state.boardState[6] === \"\" && this.state.boardState[7] === \"blackRook\" && !this.state.whiteControlledSquares.includes(4) && !this.state.whiteControlledSquares.includes(5) && !this.state.whiteControlledSquares.includes(6)) {\n                    possibleMoves.push(6);\n                  }\n                }\n\n                if (this.state.blackARookHasMoved === false) {\n                  if (this.state.boardState[4] === \"blackKing\" && this.state.boardState[3] === \"\" && this.state.boardState[2] === \"\" && this.state.boardState[1] === \"\" && this.state.boardState[0] === \"blackRook\" && !this.state.whiteControlledSquares.includes(4) && !this.state.whiteControlledSquares.includes(3) && !this.state.whiteControlledSquares.includes(2)) {\n                    possibleMoves.push(2);\n                  }\n                }\n              }\n\n              possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n              this.setState({\n                possibleMoves: this.state.possibleMoves.map((value, index) => {\n                  if (possibleMoves.includes(index)) return true;\n                  return false;\n                })\n              });\n              console.log(possibleMoves);\n            }\n\n            break;\n\n          default:\n        }\n      }\n    };\n\n    this.clearMove = () => {\n      if (this.state.moveSelected === false) {\n        this.setState({\n          possibleMoves: new Array(64).fill(false)\n        });\n      }\n    };\n\n    this.movePiece = (currentPiece, position, squareName) => {\n      //select piece\n      if (this.state.moveSelected === false && this.state.boardState[position] !== \"\" && currentPiece.includes(this.state.playerTurn.toLowerCase())) {\n        this.setState({\n          currentPiece: currentPiece,\n          startingPosition: position,\n          moveSelected: true\n        });\n      } else {\n        //cancel move\n        if (position === this.state.startingPosition) {\n          this.setState({\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false\n          });\n        } //make move\n\n\n        if (this.state.possibleMoves[position] === true) {\n          if (this.state.playerTurn.includes(\"White\")) {\n            this.setState({\n              playerTurn: \"Black\"\n            });\n          } else {\n            this.setState({\n              playerTurn: \"White\"\n            });\n          }\n\n          let pieceInitial = '';\n\n          if (this.state.currentPiece.includes(\"Knight\")) {\n            pieceInitial = pieceInitial.concat('N');\n          } else if (this.state.currentPiece.includes(\"Bishop\")) {\n            pieceInitial = pieceInitial.concat('B');\n          } else if (this.state.currentPiece.includes(\"Rook\")) {\n            pieceInitial = pieceInitial.concat('R');\n          } else if (this.state.currentPiece.includes(\"Queen\")) {\n            pieceInitial = pieceInitial.concat('Q');\n          } else if (this.state.currentPiece.includes(\"King\")) {\n            pieceInitial = pieceInitial.concat('K');\n          } //gives a row or column of the piece that is being moved if there is more than one of the same piece that can move to that square\n          // if (!currentPiece.includes(\"Pawn\") && !currentPiece.includes(\"King\")) {\n          //\n          // }\n          //adds an x to notation if a capture is made.\n\n\n          if (this.state.boardState[position] !== '' || this.state.possibleEnPassantSquare === position && this.state.currentPiece.includes(\"Pawn\")) {\n            if (this.state.currentPiece.includes('Pawn')) {\n              let columns = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n              pieceInitial = columns[this.state.startingPosition % 8];\n            }\n\n            pieceInitial = pieceInitial.concat('x');\n          } //sets en passant square for next turn.\n\n\n          if (this.state.currentPiece.includes('Pawn') && (this.state.startingPosition - 16 === position || this.state.startingPosition + 16 === position)) {\n            if (this.state.currentPiece.includes('white')) {\n              this.setState({\n                possibleEnPassantSquare: position + 8\n              });\n            } else {\n              this.setState({\n                possibleEnPassantSquare: position - 8\n              });\n            }\n          } else {\n            this.setState({\n              possibleEnPassantSquare: \"\"\n            });\n          } //checks if move is castling\n\n\n          if (this.state.startingPosition === 4 && position === 2 && this.state.currentPiece === \"blackKing\") {\n            this.setState({\n              boardState: [\"\", \"\", \"blackKing\", \"blackRook\", \"\", ...this.state.boardState.slice(5)],\n              moveRecord: [...this.state.moveRecord, `O-O-O`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false\n            });\n          } else if (this.state.startingPosition === 4 && position === 6 && this.state.currentPiece === \"blackKing\") {\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, 4), \"\", \"blackRook\", \"blackKing\", \"\", ...this.state.boardState.slice(8)],\n              moveRecord: [...this.state.moveRecord, `O-O`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false\n            });\n          } else if (this.state.startingPosition === 60 && position === 58 && this.state.currentPiece === \"whiteKing\") {\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, 56), \"\", \"\", \"whiteKing\", \"whiteRook\", \"\", ...this.state.boardState.slice(61)],\n              moveRecord: [...this.state.moveRecord, `O-O-O`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false\n            });\n          } else if (this.state.startingPosition === 60 && position === 62 && this.state.currentPiece === \"whiteKing\") {\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, 60), \"\", \"whiteRook\", \"whiteKing\", \"\"],\n              moveRecord: [...this.state.moveRecord, `O-O`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false //check for en passant captures\n\n            });\n          } else if (this.state.currentPiece === \"whitePawn\" && this.state.possibleEnPassantSquare === position && this.state.startingPosition - 7 === position) {\n            //white capture to the right\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, position), \"whitePawn\", ...this.state.boardState.slice(position + 1, position + 7), \"\", \"\", ...this.state.boardState.slice(position + 9)],\n              moveRecord: [...this.state.moveRecord, `${pieceInitial}${squareName}`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false\n            });\n          } else if (this.state.currentPiece === \"whitePawn\" && this.state.possibleEnPassantSquare === position && this.state.startingPosition - 9 === position) {\n            //white capture to the left\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, position), \"whitePawn\", ...this.state.boardState.slice(position + 1, position + 8), \"\", \"\", ...this.state.boardState.slice(position + 10)],\n              moveRecord: [...this.state.moveRecord, `${pieceInitial}${squareName}`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false\n            });\n          } else if (this.state.currentPiece === \"blackPawn\" && this.state.possibleEnPassantSquare === position && this.state.startingPosition + 7 === position) {\n            //black capture to the left\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, position - 8), \"\", \"\", ...this.state.boardState.slice(position - 6, position), \"blackPawn\", ...this.state.boardState.slice(position + 1)],\n              moveRecord: [...this.state.moveRecord, `${pieceInitial}${squareName}`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false\n            });\n          } else if (this.state.currentPiece === \"blackPawn\" && this.state.possibleEnPassantSquare === position && this.state.startingPosition + 9 === position) {\n            //black capture to the right\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, position - 9), \"\", \"\", ...this.state.boardState.slice(position - 7, position), \"blackPawn\", ...this.state.boardState.slice(position + 1)],\n              moveRecord: [...this.state.moveRecord, `${pieceInitial}${squareName}`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false\n            });\n          } else if (this.state.startingPosition < position) {\n            //regular moves\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1)],\n              moveRecord: [...this.state.moveRecord, `${pieceInitial}${squareName}`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false\n            });\n          } else {\n            this.setState({\n              boardState: [...this.state.boardState.slice(0, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1, this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1)],\n              moveRecord: [...this.state.moveRecord, `${pieceInitial}${squareName}`],\n              currentPiece: \"\",\n              startingPosition: -1,\n              moveSelected: false,\n              possibleMoves: new Array(64).fill(false),\n              checked: false\n            });\n          } //console.log(pieceInitial)\n          //this.setState({ moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ this.checkForCheckAndMate() }`] })\n          //this.checkMateCheck()\n\n        }\n      }\n    };\n\n    this.castlingConditions = () => {\n      if (this.state.boardState[0] !== \"blackRook\" && this.state.blackARookHasMoved === false) {\n        this.setState({\n          blackARookHasMoved: true\n        });\n      }\n\n      if (this.state.boardState[4] !== \"blackKing\" && this.state.blackKingHasMoved === false) {\n        this.setState({\n          blackKingHasMoved: true\n        });\n      }\n\n      if (this.state.boardState[7] !== \"blackRook\" && this.state.blackHRookHasMoved === false) {\n        this.setState({\n          blackHRookHasMoved: true\n        });\n      }\n\n      if (this.state.boardState[56] !== \"whiteRook\" && this.state.whiteARookHasMoved === false) {\n        this.setState({\n          whiteARookHasMoved: true\n        });\n      }\n\n      if (this.state.boardState[60] !== \"whiteKing\" && this.state.whiteKingHasMoved === false) {\n        this.setState({\n          whiteKingHasMoved: true\n        });\n      }\n\n      if (this.state.boardState[63] !== \"whiteRook\" && this.state.whiteHRookHasMoved === false) {\n        this.setState({\n          whiteHRookHasMoved: true\n        });\n      }\n    };\n\n    this.checkSquaresControlled = () => {\n      let possibleWhiteMoves = [];\n      let possibleBlackMoves = [];\n\n      for (let location = 0; location < 64; location++) {\n        let mod = location % 8;\n        let current = 0;\n        let verticalPieceMovements = [-8, 8];\n        let horizontalPieceMovements = [-1, 1];\n        let diagonalPieceMovements = [-9, -7, 7, 9];\n        let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17];\n\n        switch (this.state.boardState[location]) {\n          case \"whitePawn\":\n            for (let i = 0; i < 2; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"blackPawn\":\n            for (let i = 2; i < 4; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"whiteKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location;\n\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"white\")) continue;\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"blackKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location;\n\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"black\")) continue;\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"whiteBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\")) break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            break;\n\n          case \"blackBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\")) break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            break;\n\n          case \"whiteRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (this.state.boardState[current].includes(\"white\")) break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n\n              if (!this.state.boardState[current].includes(\"white\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleWhiteMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  if (this.state.boardState[current - movement].includes(\"black\")) break;\n                }\n              }\n            }\n\n            break;\n\n          case \"blackRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (this.state.boardState[current].includes(\"black\")) break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n\n              if (!this.state.boardState[current].includes(\"black\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleBlackMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  if (this.state.boardState[current - movement].includes(\"white\")) break;\n                }\n              }\n            }\n\n            break;\n\n          case \"whiteQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (this.state.boardState[current].includes(\"white\")) break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!this.state.boardState[current].includes(\"white\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleWhiteMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (this.state.boardState[current].includes(\"white\")) break;\n                  if (this.state.boardState[current - movement].includes(\"black\")) break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\")) break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            break;\n\n          case \"blackQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (this.state.boardState[current].includes(\"black\")) break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!this.state.boardState[current].includes(\"black\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleBlackMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (this.state.boardState[current].includes(\"black\")) break;\n                  if (this.state.boardState[current - movement].includes(\"white\")) break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\")) break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            break;\n\n          case \"whiteKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\")) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"blackKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\")) {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            break;\n\n          default:\n        }\n      }\n\n      possibleWhiteMoves = [...new Set(possibleWhiteMoves)];\n      possibleBlackMoves = [...new Set(possibleBlackMoves)];\n      this.setState({\n        whiteControlledSquares: [...possibleWhiteMoves],\n        blackControlledSquares: [...possibleBlackMoves]\n      }); // console.log(possibleWhiteMoves)\n      // console.log(possibleBlackMoves)\n    };\n\n    this.checkIllegalMove = (newSquare, location) => {\n      let boardDuplicate = []; //how the board will look after move.\n\n      if (this.state.boardState[location] === \"whiteKing\") {\n        if (location > newSquare) {\n          boardDuplicate = [...this.state.boardState.slice(0, newSquare), \"whiteKing\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)];\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0, location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"whiteKing\", ...this.state.boardState.slice(newSquare + 1)];\n        }\n      } else if (this.state.boardState[location] === \"blackKing\") {\n        if (location === newSquare + 2) {\n          boardDuplciate = [\"\", \"\", \"blackKing\", \"blackRook\", \"\", ...this.state.boardState.slice(5)];\n        } else if (location + 2 === newSquare) {\n          boardDuplicate = [...this.state.boardState.slice(0, 4), \"\", \"blackRook\", \"blackKing\", \"\", ...this.state.boardState.slice(8)];\n        } else if (location > newSquare) {\n          boardDuplicate = [...this.state.boardState.slice(0, newSquare), \"blackKing\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)];\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0, location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"blackKing\", ...this.state.boardState.slice(newSquare + 1)];\n        }\n      } else if (this.state.playerTurn === \"White\") {\n        if (location > newSquare) {\n          boardDuplicate = [...this.state.boardState.slice(0, newSquare), \"whitePawn\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)];\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0, location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"whitePawn\", ...this.state.boardState.slice(newSquare + 1)];\n        }\n      } else {\n        if (location > newSquare) {\n          boardDuplicate = [...this.state.boardState.slice(0, newSquare), \"blackPawn\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)];\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0, location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"blackPawn\", ...this.state.boardState.slice(newSquare + 1)];\n        }\n      }\n\n      let possibleWhiteMoves = [];\n      let possibleBlackMoves = [];\n      let whiteKingPosition = -1;\n      let blackKingPosition = -1;\n\n      for (let location = 0; location < 64; location++) {\n        let mod = location % 8;\n        let current = 0;\n        let verticalPieceMovements = [-8, 8];\n        let horizontalPieceMovements = [-1, 1];\n        let diagonalPieceMovements = [-9, -7, 7, 9];\n        let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17];\n\n        if (boardDuplicate[location] === \"whiteKing\") {\n          whiteKingPosition = location;\n        }\n\n        if (boardDuplicate[location] === \"blackKing\") {\n          blackKingPosition = location;\n        }\n\n        switch (boardDuplicate[location]) {\n          case \"whitePawn\":\n            for (let i = 0; i < 2; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"blackPawn\":\n            for (let i = 2; i < 4; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"whiteKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location;\n\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (boardDuplicate[current].includes(\"white\")) continue;\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"blackKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location;\n\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (boardDuplicate[current].includes(\"black\")) continue;\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"whiteBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (boardDuplicate[current].includes(\"white\")) break;\n                possibleWhiteMoves.push(current);\n                if (boardDuplicate[current].includes(\"black\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            break;\n\n          case \"blackBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (boardDuplicate[current].includes(\"black\")) break;\n                possibleBlackMoves.push(current);\n                if (boardDuplicate[current].includes(\"white\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            break;\n\n          case \"whiteRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (boardDuplicate[current].includes(\"white\")) break;\n                possibleWhiteMoves.push(current);\n                if (boardDuplicate[current].includes(\"black\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n\n              if (!boardDuplicate[current].includes(\"white\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleWhiteMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (boardDuplicate[current].includes(\"white\")) break;\n                  if (boardDuplicate[current - movement].includes(\"black\")) break;\n                }\n              }\n            }\n\n            break;\n\n          case \"blackRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (boardDuplicate[current].includes(\"black\")) break;\n                possibleBlackMoves.push(current);\n                if (boardDuplicate[current].includes(\"white\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n\n              if (!boardDuplicate[current].includes(\"black\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleBlackMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (boardDuplicate[current].includes(\"black\")) break;\n                  if (boardDuplicate[current - movement].includes(\"white\")) break;\n                }\n              }\n            }\n\n            break;\n\n          case \"whiteQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (boardDuplicate[current].includes(\"white\")) break;\n                possibleWhiteMoves.push(current);\n                if (boardDuplicate[current].includes(\"black\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!boardDuplicate[current].includes(\"white\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleWhiteMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (boardDuplicate[current].includes(\"white\")) break;\n                  if (boardDuplicate[current - movement].includes(\"black\")) break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (boardDuplicate[current].includes(\"white\")) break;\n                possibleWhiteMoves.push(current);\n                if (boardDuplicate[current].includes(\"black\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            break;\n\n          case \"blackQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              while (current < 64 && current > 0) {\n                if (boardDuplicate[current].includes(\"black\")) break;\n                possibleBlackMoves.push(current);\n                if (boardDuplicate[current].includes(\"white\")) break;\n                current += verticalPieceMovements[movement];\n                ;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!boardDuplicate[current].includes(\"black\")) {\n                while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                  possibleBlackMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0) break;\n                  if (boardDuplicate[current].includes(\"black\")) break;\n                  if (boardDuplicate[current - movement].includes(\"white\")) break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (boardDuplicate[current].includes(\"black\")) break;\n                possibleBlackMoves.push(current);\n                if (boardDuplicate[current].includes(\"white\")) break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            break;\n\n          case \"whiteKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              if (current < 64 && current > 0 && !boardDuplicate[current].includes(\"white\")) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!boardDuplicate[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !boardDuplicate[current].includes(\"white\")) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            break;\n\n          case \"blackKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n\n              if (current < 64 && current > 0 && !boardDuplicate[current].includes(\"black\")) {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements) {\n              let current = location + movement;\n\n              if (!boardDuplicate[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !boardDuplicate[current].includes(\"black\")) {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            break;\n\n          default:\n        }\n      }\n\n      possibleWhiteMoves = [...new Set(possibleWhiteMoves)];\n      possibleBlackMoves = [...new Set(possibleBlackMoves)];\n      if (this.state.playerTurn === \"White\" && possibleBlackMoves.includes(whiteKingPosition)) return false;\n      if (this.state.playerTurn === \"Black\" && possibleWhiteMoves.includes(blackKingPosition)) return false;\n      return true;\n    };\n\n    this.checkmateHelper = location => {\n      let mod = location % 8;\n      let current = 0;\n      let possibleMoves = [];\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n      let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17];\n\n      switch (this.state.boardState[location]) {\n        case \"whitePawn\":\n          current = location - 8;\n\n          if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n            possibleMoves.push(current);\n\n            if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\")) {\n              possibleMoves.push(current - 8);\n            }\n          }\n\n          for (let i = 0; i < 2; i++) {\n            current = location + diagonalPieceMovements[i];\n            let counter = mod;\n            diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"black\") || current === this.state.possibleEnPassantSquare) && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"blackPawn\":\n          current = location + 8;\n\n          if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\")) {\n            possibleMoves.push(current);\n\n            if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\")) {\n              possibleMoves.push(current + 8);\n            }\n          }\n\n          for (let i = 2; i < 4; i++) {\n            current = location + diagonalPieceMovements[i];\n            let counter = mod;\n            diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"white\") || current === this.state.possibleEnPassantSquare) && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n              possibleMoves.push(current);\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"whiteKnight\":\n          for (let movement of knightPieceMovements) {\n            current = movement + location;\n\n            if (current < 64 && current > 0) {\n              let spacesAway = 0;\n              if (movement === -15 || movement === 17) spacesAway = 1;\n              if (movement === -17 || movement === 15) spacesAway = -1;\n              if (movement === -6 || movement === 10) spacesAway = 2;\n              if (movement === -10 || movement === 6) spacesAway = -2;\n              if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n              if (this.state.boardState[current].includes(\"white\")) continue;\n              possibleMoves.push(current);\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"blackKnight\":\n          for (let movement of knightPieceMovements) {\n            current = movement + location;\n\n            if (current < 64 && current > 0) {\n              let spacesAway = 0;\n              if (movement === -15 || movement === 17) spacesAway = 1;\n              if (movement === -17 || movement === 15) spacesAway = -1;\n              if (movement === -6 || movement === 10) spacesAway = 2;\n              if (movement === -10 || movement === 6) spacesAway = -2;\n              if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n              if (this.state.boardState[current].includes(\"black\")) continue;\n              possibleMoves.push(current);\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"whiteBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"blackBishop\":\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"whiteRook\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n            if (current < 0 || current > 63) continue;\n\n            if (!this.state.boardState[current].includes(\"white\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"white\")) break;\n                if (this.state.boardState[current - movement].includes(\"black\")) break;\n              }\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"blackRook\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n            if (current < 0 || current > 63) continue;\n\n            if (!this.state.boardState[current].includes(\"black\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"black\")) break;\n                if (this.state.boardState[current - movement].includes(\"white\")) break;\n              }\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"whiteQueen\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"white\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"white\")) break;\n                if (this.state.boardState[current - movement].includes(\"black\")) break;\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"white\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"black\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"blackQueen\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            while (current < 64 && current > 0) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += verticalPieceMovements[movement];\n              ;\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"black\")) {\n              while (Math.floor(current * .125) === Math.floor(location * .125)) {\n                possibleMoves.push(current);\n                current += movement;\n                if (current > 63 || current < 0) break;\n                if (this.state.boardState[current].includes(\"black\")) break;\n                if (this.state.boardState[current - movement].includes(\"white\")) break;\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n              if (this.state.boardState[current].includes(\"black\")) break;\n              possibleMoves.push(current);\n              if (this.state.boardState[current].includes(\"white\")) break;\n              current += diagonalPieceMovements[movement];\n              movement % 2 === 0 ? counter-- : counter++;\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"whiteKing\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\")) {\n              if (!this.state.blackControlledSquares.includes(current)) {\n                possibleMoves.push(current);\n              }\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n              if (!this.state.blackControlledSquares.includes(current)) {\n                possibleMoves.push(current);\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n              if (!this.state.blackControlledSquares.includes(current)) {\n                possibleMoves.push(current);\n              }\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        case \"blackKing\":\n          for (let movement in verticalPieceMovements) {\n            let current = location + verticalPieceMovements[movement];\n\n            if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\")) {\n              if (!this.state.whiteControlledSquares.includes(current)) {\n                possibleMoves.push(current);\n              }\n            }\n          }\n\n          for (let movement of horizontalPieceMovements) {\n            let current = location + movement;\n\n            if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125)) {\n              if (!this.state.whiteControlledSquares.includes(current)) {\n                possibleMoves.push(current);\n              }\n            }\n          }\n\n          for (let movement in diagonalPieceMovements) {\n            let current = location + diagonalPieceMovements[movement];\n            let counter = mod;\n            movement % 2 === 0 ? counter-- : counter++;\n\n            if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n              if (!this.state.whiteControlledSquares.includes(current)) {\n                possibleMoves.push(current);\n              }\n            }\n          }\n\n          possibleMoves = possibleMoves.filter(value => this.checkIllegalMove(value, location));\n          break;\n\n        default:\n      }\n\n      return possibleMoves;\n    };\n\n    this.checkMateCheck = () => {\n      if (this.state.checked === false) {\n        let whiteKingPosition = -1;\n        let blackKingPosition = -1;\n        let possibleWhiteMoves = [];\n        let possibleBlackMoves = [];\n\n        for (let location = 0; location < 64; location++) {\n          if (this.state.boardState[location].length !== 0) {\n            let array = this.checkmateHelper(location);\n            console.log(array);\n\n            if (this.state.boardState[location].includes(\"white\")) {\n              possibleWhiteMoves = [...possibleWhiteMoves, ...this.checkmateHelper(location)];\n            } else {\n              possibleBlackMoves = [...possibleBlackMoves, ...this.checkmateHelper(location)];\n            }\n\n            if (this.state.boardState[location] === \"whiteKing\") whiteKingPosition = location;\n            if (this.state.boardState[location] === \"blackKing\") blackKingPosition = location;\n          }\n        }\n\n        console.log(\"White's Moves\", this.state.playerTurn, possibleWhiteMoves);\n        console.log(\"Black's Moves\", this.state.playerTurn, possibleBlackMoves);\n\n        if (this.state.playerTurn === \"White\" && possibleBlackMoves.includes(whiteKingPosition) && possibleWhiteMoves.length === 0) {\n          console.log(\"checkmate\");\n          this.setState({\n            moveRecord: [...this.state.moveRecord.slice(0, this.state.moveRecord.length - 1), this.state.moveRecord[this.state.moveRecord.length - 1] + '#'],\n            checked: true\n          });\n        } else if (this.state.playerTurn === \"White\" && possibleBlackMoves.includes(whiteKingPosition)) {\n          this.setState({\n            moveRecord: [...this.state.moveRecord.slice(0, this.state.moveRecord.length - 1), this.state.moveRecord[this.state.moveRecord.length - 1] + '+'],\n            checked: true\n          });\n        } else if (this.state.playerTurn === \"Black\" && possibleWhiteMoves.includes(blackKingPosition) && possibleBlackMoves.length === 0) {\n          this.setState({\n            moveRecord: [...this.state.moveRecord.slice(0, this.state.moveRecord.length - 1), this.state.moveRecord[this.state.moveRecord.length - 1] + '#'],\n            checked: true\n          });\n        } else if (this.state.playerTurn === \"Black\" && possibleWhiteMoves.includes(blackKingPosition)) {\n          this.setState({\n            moveRecord: [...this.state.moveRecord.slice(0, this.state.moveRecord.length - 1), this.state.moveRecord[this.state.moveRecord.length - 1] + '+'],\n            checked: true\n          });\n        } else {\n          this.setState({\n            checked: true\n          });\n        }\n      }\n    };\n\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"blackRook\", \"blackKnight\", \"blackBishop\", \"blackQueen\", \"blackKing\", \"blackBishop\", \"blackKnight\", \"blackRook\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whiteRook\", \"whiteKnight\", \"whiteBishop\", \"whiteQueen\", \"whiteKing\", \"whiteBishop\", \"whiteKnight\", \"whiteRook\"],\n      possibleMoves: new Array(64).fill(false),\n      whiteControlledSquares: [],\n      blackControlledSquares: [],\n      moveRecord: [],\n      moveSelected: false,\n      currentPiece: \"\",\n      startingPosition: -1,\n      playerTurn: \"White\",\n      possibleEnPassantSquare: \"\",\n      checked: false,\n      whiteKingHasMoved: false,\n      whiteARookHasMoved: false,\n      whiteHRookHasMoved: false,\n      blackKingHasMoved: false,\n      blackARookHasMoved: false,\n      blackHRookHasMoved: false\n    };\n  }\n\n  render() {\n    let board = this.state.colorGrid.map((value, index) => {\n      return /*#__PURE__*/React.createElement(Square, {\n        index: index,\n        value: value,\n        key: index,\n        colorGrid: this.state.colorGrid,\n        boardState: this.state.boardState,\n        possibleMoves: this.state.possibleMoves,\n        moveSelected: this.state.moveSelected,\n        startingPosition: this.state.startingPosition,\n        findSquares: this.findSquares,\n        clearMove: this.clearMove,\n        movePiece: this.movePiece,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1653,\n          columnNumber: 9\n        }\n      });\n    });\n    let moveList = this.state.moveRecord.map(value => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"column notationMoves\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1670,\n          columnNumber: 9\n        }\n      }, value);\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1674,\n        columnNumber: 7\n      }\n    }, this.castlingConditions(), this.checkMateCheck(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1677,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1678,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1679,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1681,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1682,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1683,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"chessHeaderImage\",\n      src: whitePawn,\n      alt: \"White Pawn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1684,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1686,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"chessHeaderImage\",\n      src: blackKnight,\n      alt: \"black Knight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1687,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1689,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"chessHeaderImage\",\n      src: whiteKing,\n      alt: \"White King\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1690,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1692,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1693,\n        columnNumber: 17\n      }\n    }, \"CHESS\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1695,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"chessHeaderImage\",\n      src: blackQueen,\n      alt: \"Black Queen\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1696,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1698,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"chessHeaderImage\",\n      src: whiteRook,\n      alt: \"White Rook\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1699,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerColumn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1701,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"chessHeaderImage\",\n      src: blackBishop,\n      alt: \"Black Bishop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1702,\n        columnNumber: 17\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1706,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1707,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1710,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1711,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1712,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1713,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"boardHolderTwo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1714,\n        columnNumber: 17\n      }\n    }, board)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"column moves\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1720,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"moveBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1721,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1722,\n        columnNumber: 15\n      }\n    }, `${this.state.playerTurn} to move.`), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1723,\n        columnNumber: 15\n      }\n    }, moveList)))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/Chess-ThomasG/src/App.js"],"names":["React","Component","Square","whitePawn","whiteRook","whiteKing","blackKnight","blackBishop","blackQueen","App","constructor","props","findSquares","location","state","moveSelected","checkSquaresControlled","mod","current","possibleMoves","verticalPieceMovements","horizontalPieceMovements","diagonalPieceMovements","knightPieceMovements","boardState","playerTurn","includes","push","Math","floor","i","counter","possibleEnPassantSquare","filter","value","checkIllegalMove","setState","map","index","console","log","movement","spacesAway","blackControlledSquares","whiteKingHasMoved","whiteHRookHasMoved","whiteARookHasMoved","whiteControlledSquares","blackKingHasMoved","blackHRookHasMoved","blackARookHasMoved","clearMove","Array","fill","movePiece","currentPiece","position","squareName","toLowerCase","startingPosition","pieceInitial","concat","columns","slice","moveRecord","checked","castlingConditions","possibleWhiteMoves","possibleBlackMoves","Set","newSquare","boardDuplicate","boardDuplciate","whiteKingPosition","blackKingPosition","checkmateHelper","checkMateCheck","length","array","colorGrid","render","board","moveList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Square from './components/Square'\nimport whitePawn from './images/Chess_plt60.png'\nimport whiteRook from './images/Chess_rlt60.png'\nimport whiteKing from './images/Chess_klt60.png'\nimport blackKnight from './images/Chess_ndt60.png'\nimport blackBishop from './images/Chess_bdt60.png'\nimport blackQueen from './images/Chess_qdt60.png'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      colorGrid: [\"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\", \"green\", \"white\"],\n      boardState: [\"blackRook\", \"blackKnight\", \"blackBishop\", \"blackQueen\", \"blackKing\", \"blackBishop\", \"blackKnight\", \"blackRook\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"blackPawn\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whitePawn\", \"whiteRook\", \"whiteKnight\", \"whiteBishop\", \"whiteQueen\", \"whiteKing\", \"whiteBishop\", \"whiteKnight\", \"whiteRook\"],\n      possibleMoves: new Array(64).fill(false),\n      whiteControlledSquares: [],\n      blackControlledSquares: [],\n      moveRecord: [],\n      moveSelected: false,\n      currentPiece: \"\",\n      startingPosition: -1,\n      playerTurn: \"White\",\n      possibleEnPassantSquare: \"\",\n      checked: false,\n      whiteKingHasMoved: false,\n      whiteARookHasMoved: false,\n      whiteHRookHasMoved: false,\n      blackKingHasMoved: false,\n      blackARookHasMoved: false,\n      blackHRookHasMoved: false\n    }\n  }\n\n  findSquares = (location) => {\n    if (this.state.moveSelected === false) {\n      this.checkSquaresControlled()\n      let mod = location % 8;\n      let current = 0;\n      let possibleMoves = [];\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n      let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17]\n      switch (this.state.boardState[location]) {\n        case \"whitePawn\":\n          if (this.state.playerTurn === \"White\")  {\n            current = location - 8;\n            if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n              possibleMoves.push(current);\n              if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\"))  {\n                possibleMoves.push(current - 8);\n              }\n            }\n\n            for (let i = 0; i < 2; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"black\") || current === this.state.possibleEnPassantSquare) && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"blackPawn\":\n          if (this.state.playerTurn === \"Black\")  {\n            current = location + 8;\n            if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n              possibleMoves.push(current);\n              if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\"))  {\n                possibleMoves.push(current + 8);\n              }\n            }\n\n            for (let i = 2; i < 4; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"white\") || current === this.state.possibleEnPassantSquare) && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"whiteKnight\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"white\")) continue;\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"blackKnight\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"black\")) continue;\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"whiteBishop\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n              this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n                if (possibleMoves.includes(index))  return true;\n                return false;\n              })})\n\n            console.log(possibleMoves)\n          }\n        break;\n\n        case \"blackBishop\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n              this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n                if (possibleMoves.includes(index))  return true;\n                return false;\n              })})\n\n            console.log(possibleMoves)\n          }\n        break;\n\n        case \"whiteRook\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n              if (possibleMoves.includes(index))  return true;\n              return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n\n        case \"blackRook\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n               this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n                 if (possibleMoves.includes(index))  return true;\n                 return false;\n               })})\n\n              console.log( possibleMoves )\n            }\n          break;\n        case \"whiteQueen\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"blackQueen\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"whiteKing\":\n          if (this.state.playerTurn === \"White\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\"))  {\n                if (!this.state.blackControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                if (!this.state.blackControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n                if (!this.state.blackControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            //castling\n            if (this.state.whiteKingHasMoved === false) {\n              if (this.state.whiteHRookHasMoved === false)  {\n                if (this.state.boardState[60] === \"whiteKing\" && this.state.boardState[61] === \"\" && this.state.boardState[62] === \"\" && this.state.boardState[63] === \"whiteRook\" && (!this.state.blackControlledSquares.includes(60) && !this.state.blackControlledSquares.includes(61) && !this.state.blackControlledSquares.includes(62))) {\n                  possibleMoves.push(62)\n                }\n              }\n              if (this.state.whiteARookHasMoved === false)  {\n                if (this.state.boardState[60] === \"whiteKing\" && this.state.boardState[59] === \"\" && this.state.boardState[58] === \"\" && this.state.boardState[57] === \"\" && this.state.boardState[56] === \"whiteRook\" && (!this.state.blackControlledSquares.includes(60) && !this.state.blackControlledSquares.includes(59) && !this.state.blackControlledSquares.includes(58))) {\n                  possibleMoves.push(58)\n                }\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        case \"blackKing\":\n          if (this.state.playerTurn === \"Black\")  {\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\"))  {\n                if (!this.state.whiteControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                if (!this.state.whiteControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n                if (!this.state.whiteControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            //castling\n            if (this.state.blackKingHasMoved === false) {\n              if (this.state.blackHRookHasMoved === false)  {\n                if (this.state.boardState[4] === \"blackKing\" && this.state.boardState[5] === \"\" && this.state.boardState[6] === \"\" && this.state.boardState[7] === \"blackRook\" && (!this.state.whiteControlledSquares.includes(4) && !this.state.whiteControlledSquares.includes(5) && !this.state.whiteControlledSquares.includes(6))) {\n                  possibleMoves.push(6)\n                }\n              }\n              if (this.state.blackARookHasMoved === false)  {\n                if (this.state.boardState[4] === \"blackKing\" && this.state.boardState[3] === \"\" && this.state.boardState[2] === \"\" && this.state.boardState[1] === \"\" && this.state.boardState[0] === \"blackRook\" && (!this.state.whiteControlledSquares.includes(4) && !this.state.whiteControlledSquares.includes(3) && !this.state.whiteControlledSquares.includes(2))) {\n                  possibleMoves.push(2)\n                }\n              }\n            }\n\n            possibleMoves = possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n\n            this.setState({ possibleMoves: this.state.possibleMoves.map( (value, index) => {\n             if (possibleMoves.includes(index))  return true;\n             return false;\n            })})\n\n            console.log( possibleMoves )\n          }\n        break;\n        default:\n      }\n    }\n  }\n\n  clearMove = () => {\n    if (this.state.moveSelected === false)  {\n      this.setState({ possibleMoves: new Array(64).fill(false) })\n    }\n  }\n\n  movePiece = (currentPiece, position, squareName) => {\n    //select piece\n    if (this.state.moveSelected === false && this.state.boardState[position] !== \"\" && currentPiece.includes(this.state.playerTurn.toLowerCase()))  {\n      this.setState({\n      currentPiece: currentPiece,\n      startingPosition: position,\n      moveSelected: true,\n    })} else {\n        //cancel move\n        if (position === this.state.startingPosition)  {\n          this.setState({\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n          })\n        }\n        //make move\n        if (this.state.possibleMoves[position] === true) {\n          if (this.state.playerTurn.includes(\"White\")) {\n            this.setState({ playerTurn: \"Black\"})\n          } else {\n            this.setState({ playerTurn: \"White\"})\n          }\n          let pieceInitial = ''\n          if (this.state.currentPiece.includes(\"Knight\")) {\n            pieceInitial = pieceInitial.concat('N')\n          } else if (this.state.currentPiece.includes(\"Bishop\")) {\n            pieceInitial = pieceInitial.concat('B')\n          } else if (this.state.currentPiece.includes(\"Rook\")) {\n            pieceInitial = pieceInitial.concat('R')\n          } else if (this.state.currentPiece.includes(\"Queen\")) {\n            pieceInitial = pieceInitial.concat('Q')\n          } else if (this.state.currentPiece.includes(\"King\")) {\n            pieceInitial = pieceInitial.concat('K')\n          }\n\n          //gives a row or column of the piece that is being moved if there is more than one of the same piece that can move to that square\n          // if (!currentPiece.includes(\"Pawn\") && !currentPiece.includes(\"King\")) {\n          //\n          // }\n\n          //adds an x to notation if a capture is made.\n          if (this.state.boardState[position] !== '' || (this.state.possibleEnPassantSquare === position && this.state.currentPiece.includes(\"Pawn\")))  {\n            if (this.state.currentPiece.includes('Pawn')) {\n              let columns = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n              pieceInitial = columns[this.state.startingPosition % 8]\n            }\n            pieceInitial = pieceInitial.concat('x')\n          }\n\n          //sets en passant square for next turn.\n            if (this.state.currentPiece.includes('Pawn') && (this.state.startingPosition - 16 === position || this.state.startingPosition + 16 === position)){\n              if (this.state.currentPiece.includes('white'))  {\n                this.setState({ possibleEnPassantSquare: position + 8})\n              } else {\n                this.setState({ possibleEnPassantSquare: position - 8})\n              }\n            } else {\n              this.setState({ possibleEnPassantSquare: \"\"})\n            }\n          //checks if move is castling\n          if (this.state.startingPosition === 4 && position === 2 && this.state.currentPiece === \"blackKing\") {\n            this.setState({\n            boardState: [\"\", \"\", \"blackKing\", \"blackRook\", \"\", ...this.state.boardState.slice(5)],\n            moveRecord: [...this.state.moveRecord, `O-O-O`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n          })} else if (this.state.startingPosition === 4 && position === 6 && this.state.currentPiece === \"blackKing\") {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,4), \"\", \"blackRook\", \"blackKing\", \"\", ...this.state.boardState.slice(8)],\n            moveRecord: [...this.state.moveRecord, `O-O`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n          })} else if (this.state.startingPosition === 60 && position === 58 && this.state.currentPiece === \"whiteKing\") {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,56), \"\", \"\", \"whiteKing\", \"whiteRook\", \"\", ...this.state.boardState.slice(61)],\n            moveRecord: [...this.state.moveRecord, `O-O-O`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n          })} else if (this.state.startingPosition === 60 && position === 62 && this.state.currentPiece === \"whiteKing\") {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,60), \"\", \"whiteRook\", \"whiteKing\", \"\"],\n            moveRecord: [...this.state.moveRecord, `O-O`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n            //check for en passant captures\n          })} else if ((this.state.currentPiece === \"whitePawn\") && this.state.possibleEnPassantSquare === position && this.state.startingPosition - 7 === position) {\n            //white capture to the right\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position), \"whitePawn\", ...this.state.boardState.slice(position + 1, position + 7), \"\", \"\", ...this.state.boardState.slice(position + 9)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n          })} else if ((this.state.currentPiece === \"whitePawn\") && this.state.possibleEnPassantSquare === position && this.state.startingPosition - 9 === position) {\n            //white capture to the left\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position), \"whitePawn\", ...this.state.boardState.slice(position + 1, position + 8), \"\", \"\", ...this.state.boardState.slice(position + 10)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n          })} else if ((this.state.currentPiece === \"blackPawn\") && this.state.possibleEnPassantSquare === position && this.state.startingPosition + 7 === position) {\n            //black capture to the left\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position - 8), \"\", \"\", ...this.state.boardState.slice(position - 6, position), \"blackPawn\", ...this.state.boardState.slice(position + 1)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n          })} else if ((this.state.currentPiece === \"blackPawn\") && this.state.possibleEnPassantSquare === position && this.state.startingPosition + 9 === position) {\n            //black capture to the right\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position - 9), \"\", \"\", ...this.state.boardState.slice(position - 7, position), \"blackPawn\", ...this.state.boardState.slice(position + 1)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n          })} else if (this.state.startingPosition < position) {\n            //regular moves\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1, position), this.state.currentPiece, ...this.state.boardState.slice(position + 1)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n          })} else {\n            this.setState({\n            boardState: [...this.state.boardState.slice(0,position), this.state.currentPiece, ...this.state.boardState.slice(position + 1, this.state.startingPosition), \"\", ...this.state.boardState.slice(this.state.startingPosition + 1)],\n            moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ squareName }`],\n            currentPiece: \"\",\n            startingPosition: -1,\n            moveSelected: false,\n            possibleMoves: new Array(64).fill(false),\n            checked: false\n          })\n          }\n          //console.log(pieceInitial)\n          //this.setState({ moveRecord: [...this.state.moveRecord, `${ pieceInitial }${ this.checkForCheckAndMate() }`] })\n          //this.checkMateCheck()\n        }\n    }\n  }\n\n  castlingConditions = () => {\n    if (this.state.boardState[0] !== \"blackRook\" && this.state.blackARookHasMoved === false) {\n      this.setState({ blackARookHasMoved: true })\n    }\n    if (this.state.boardState[4] !== \"blackKing\" && this.state.blackKingHasMoved === false) {\n      this.setState({ blackKingHasMoved: true })\n    }\n    if (this.state.boardState[7] !== \"blackRook\" && this.state.blackHRookHasMoved === false) {\n      this.setState({ blackHRookHasMoved: true })\n    }\n    if (this.state.boardState[56] !== \"whiteRook\" && this.state.whiteARookHasMoved === false) {\n      this.setState({ whiteARookHasMoved: true })\n    }\n    if (this.state.boardState[60] !== \"whiteKing\" && this.state.whiteKingHasMoved === false) {\n      this.setState({ whiteKingHasMoved: true })\n    }\n    if (this.state.boardState[63] !== \"whiteRook\" && this.state.whiteHRookHasMoved === false) {\n      this.setState({ whiteHRookHasMoved: true })\n    }\n  }\n\n  checkSquaresControlled = () => {\n    let possibleWhiteMoves = [];\n    let possibleBlackMoves = [];\n    for (let location = 0; location < 64; location++) {\n      let mod = location % 8;\n      let current = 0;\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n      let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17]\n      switch (this.state.boardState[location]) {\n        case \"whitePawn\":\n            for (let i = 0; i < 2; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n        break;\n        case \"blackPawn\":\n            for (let i = 2; i < 4; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                possibleBlackMoves.push(current);\n              }\n            }\n        break;\n        case \"whiteKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"white\")) continue;\n                possibleWhiteMoves.push(current);\n              }\n            }\n        break;\n        case \"blackKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"black\")) continue;\n                possibleBlackMoves.push(current);\n              }\n            }\n        break;\n        case \"whiteBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n        break;\n\n        case \"blackBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n        break;\n\n        case \"whiteRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleWhiteMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n        break;\n\n        case \"blackRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleBlackMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n          break;\n        case \"whiteQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleWhiteMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleWhiteMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n        break;\n        case \"blackQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleBlackMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleBlackMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n        break;\n        case \"whiteKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\"))  {\n                possibleWhiteMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleWhiteMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n                possibleWhiteMoves.push(current);\n              }\n            }\n        break;\n        case \"blackKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\"))  {\n                possibleBlackMoves.push(current);\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleBlackMoves.push(current);\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n                possibleBlackMoves.push(current);\n              }\n            }\n        break;\n        default:\n      }\n    }\n    possibleWhiteMoves = [...new Set(possibleWhiteMoves)]\n    possibleBlackMoves = [...new Set(possibleBlackMoves)]\n\n     this.setState({\n       whiteControlledSquares: [...possibleWhiteMoves],\n       blackControlledSquares: [...possibleBlackMoves]\n     })\n     // console.log(possibleWhiteMoves)\n     // console.log(possibleBlackMoves)\n  }\n\n  checkIllegalMove = (newSquare, location) => {\n      let boardDuplicate = []\n      //how the board will look after move.\n      if (this.state.boardState[location] === \"whiteKing\") {\n        if (location > newSquare) {\n        boardDuplicate = [...this.state.boardState.slice(0,newSquare), \"whiteKing\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)]\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0,location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"whiteKing\", ...this.state.boardState.slice(newSquare + 1)]\n        }\n      } else if (this.state.boardState[location] === \"blackKing\") {\n        if (location === newSquare + 2) {\n          boardDuplciate = [\"\", \"\", \"blackKing\", \"blackRook\", \"\", ...this.state.boardState.slice(5)]\n        } else if (location + 2 === newSquare)  {\n          boardDuplicate = [...this.state.boardState.slice(0,4), \"\", \"blackRook\", \"blackKing\", \"\", ...this.state.boardState.slice(8)]\n        } else if (location > newSquare) {\n          boardDuplicate = [...this.state.boardState.slice(0,newSquare), \"blackKing\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)]\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0,location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"blackKing\", ...this.state.boardState.slice(newSquare + 1)]\n        }\n      } else if (this.state.playerTurn === \"White\") {\n        if (location > newSquare) {\n        boardDuplicate = [...this.state.boardState.slice(0,newSquare), \"whitePawn\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)]\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0,location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"whitePawn\", ...this.state.boardState.slice(newSquare + 1)]\n        }\n      } else {\n        if (location > newSquare) {\n        boardDuplicate = [...this.state.boardState.slice(0,newSquare), \"blackPawn\", ...this.state.boardState.slice(newSquare + 1, location), \"\", ...this.state.boardState.slice(location + 1)]\n        } else {\n          boardDuplicate = [...this.state.boardState.slice(0,location), \"\", ...this.state.boardState.slice(location + 1, newSquare), \"blackPawn\", ...this.state.boardState.slice(newSquare + 1)]\n        }\n      }\n\n      let possibleWhiteMoves = [];\n      let possibleBlackMoves = [];\n      let whiteKingPosition = -1;\n      let blackKingPosition = -1;\n      for (let location = 0; location < 64; location++) {\n        let mod = location % 8;\n        let current = 0;\n        let verticalPieceMovements = [-8, 8];\n        let horizontalPieceMovements = [-1, 1];\n        let diagonalPieceMovements = [-9, -7, 7, 9];\n        let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17]\n        if (boardDuplicate[location] === \"whiteKing\") {\n          whiteKingPosition = location;\n        }\n        if (boardDuplicate[location] === \"blackKing\") {\n          blackKingPosition = location;\n        }\n        switch (boardDuplicate[location]) {\n          case \"whitePawn\":\n              for (let i = 0; i < 2; i++) {\n                current = location + diagonalPieceMovements[i];\n                let counter = mod;\n                diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n                if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                  possibleWhiteMoves.push(current);\n                }\n              }\n          break;\n          case \"blackPawn\":\n              for (let i = 2; i < 4; i++) {\n                current = location + diagonalPieceMovements[i];\n                let counter = mod;\n                diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n                if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                  possibleBlackMoves.push(current);\n                }\n              }\n          break;\n          case \"whiteKnight\":\n              for (let movement of knightPieceMovements) {\n                current = movement + location\n                if (current < 64 && current > 0) {\n                  let spacesAway = 0;\n                  if (movement === -15 || movement === 17) spacesAway = 1;\n                  if (movement === -17 || movement === 15) spacesAway = -1;\n                  if (movement === -6 || movement === 10) spacesAway = 2;\n                  if (movement === -10 || movement === 6) spacesAway = -2;\n                  if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                  if (boardDuplicate[current].includes(\"white\")) continue;\n                  possibleWhiteMoves.push(current);\n                }\n              }\n          break;\n          case \"blackKnight\":\n              for (let movement of knightPieceMovements) {\n                current = movement + location\n                if (current < 64 && current > 0) {\n                  let spacesAway = 0;\n                  if (movement === -15 || movement === 17) spacesAway = 1;\n                  if (movement === -17 || movement === 15) spacesAway = -1;\n                  if (movement === -6 || movement === 10) spacesAway = 2;\n                  if (movement === -10 || movement === 6) spacesAway = -2;\n                  if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                  if (boardDuplicate[current].includes(\"black\")) continue;\n                  possibleBlackMoves.push(current);\n                }\n              }\n          break;\n          case \"whiteBishop\":\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  possibleWhiteMoves.push(current);\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n          break;\n\n          case \"blackBishop\":\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  possibleBlackMoves.push(current);\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n          break;\n\n          case \"whiteRook\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                while (current < 64 && current > 0)  {\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  possibleWhiteMoves.push(current);\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  current += verticalPieceMovements[movement];;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (current < 0 || current > 63) continue;\n                if (!boardDuplicate[current].includes(\"white\"))  {\n                  while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleWhiteMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0)  break;\n                    if (boardDuplicate[current].includes(\"white\"))  break;\n                    if (boardDuplicate[current - movement].includes(\"black\"))  break;\n                  }\n                }\n              }\n          break;\n\n          case \"blackRook\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                while (current < 64 && current > 0)  {\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  possibleBlackMoves.push(current);\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  current += verticalPieceMovements[movement];;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (current < 0 || current > 63) continue;\n                if (!boardDuplicate[current].includes(\"black\"))  {\n                  while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleBlackMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0)  break;\n                    if (boardDuplicate[current].includes(\"black\"))  break;\n                    if (boardDuplicate[current - movement].includes(\"white\"))  break;\n                  }\n                }\n              }\n            break;\n          case \"whiteQueen\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                while (current < 64 && current > 0)  {\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  possibleWhiteMoves.push(current);\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  current += verticalPieceMovements[movement];;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (!boardDuplicate[current].includes(\"white\"))  {\n                  while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleWhiteMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0)  break;\n                    if (boardDuplicate[current].includes(\"white\"))  break;\n                    if (boardDuplicate[current - movement].includes(\"black\"))  break;\n                  }\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  possibleWhiteMoves.push(current);\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n          break;\n          case \"blackQueen\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                while (current < 64 && current > 0)  {\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  possibleBlackMoves.push(current);\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  current += verticalPieceMovements[movement];;\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (!boardDuplicate[current].includes(\"black\"))  {\n                  while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleBlackMoves.push(current);\n                    current += movement;\n                    if (current > 63 || current < 0)  break;\n                    if (boardDuplicate[current].includes(\"black\"))  break;\n                    if (boardDuplicate[current - movement].includes(\"white\"))  break;\n                  }\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                  if (boardDuplicate[current].includes(\"black\"))  break;\n                  possibleBlackMoves.push(current);\n                  if (boardDuplicate[current].includes(\"white\"))  break;\n                  current += diagonalPieceMovements[movement];\n                  movement % 2 === 0 ? counter-- : counter++;\n                }\n              }\n          break;\n          case \"whiteKing\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                if (current < 64 && current > 0 && !boardDuplicate[current].includes(\"white\"))  {\n                  possibleWhiteMoves.push(current);\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (!boardDuplicate[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleWhiteMoves.push(current);\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !boardDuplicate[current].includes(\"white\")) {\n                  possibleWhiteMoves.push(current);\n                }\n              }\n          break;\n          case \"blackKing\":\n              for (let movement in verticalPieceMovements) {\n                let current = location + verticalPieceMovements[movement];\n                if (current < 64 && current > 0 && !boardDuplicate[current].includes(\"black\"))  {\n                  possibleBlackMoves.push(current);\n                }\n              }\n\n              for (let movement of horizontalPieceMovements)  {\n                let current = location + movement;\n                if (!boardDuplicate[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                    possibleBlackMoves.push(current);\n                }\n              }\n\n              for (let movement in diagonalPieceMovements) {\n                let current = location + diagonalPieceMovements[movement];\n                let counter = mod;\n                movement % 2 === 0 ? counter-- : counter++;\n                if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !boardDuplicate[current].includes(\"black\")) {\n                  possibleBlackMoves.push(current);\n                }\n              }\n          break;\n          default:\n        }\n      }\n      possibleWhiteMoves = [...new Set(possibleWhiteMoves)]\n      possibleBlackMoves = [...new Set(possibleBlackMoves)]\n\n      if (this.state.playerTurn === \"White\" && possibleBlackMoves.includes(whiteKingPosition)) return false;\n      if (this.state.playerTurn === \"Black\" && possibleWhiteMoves.includes(blackKingPosition)) return false;\n      return true;\n  }\n\n  checkmateHelper = (location) => {\n      let mod = location % 8;\n      let current = 0;\n      let possibleMoves = [];\n      let verticalPieceMovements = [-8, 8];\n      let horizontalPieceMovements = [-1, 1];\n      let diagonalPieceMovements = [-9, -7, 7, 9];\n      let knightPieceMovements = [-17, -15, -10, -6, 6, 10, 15, 17]\n      switch (this.state.boardState[location]) {\n        case \"whitePawn\":\n            current = location - 8;\n            if (current > 7 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n              possibleMoves.push(current);\n              if (Math.floor(location * .125) === 6 && !this.state.boardState[current - 8].includes(\"white\") && !this.state.boardState[current - 8].includes(\"black\"))  {\n                possibleMoves.push(current - 8);\n              }\n            }\n\n            for (let i = 0; i < 2; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"black\") || current === this.state.possibleEnPassantSquare) && Math.floor((location - 8) * .125) === Math.floor(current * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n        case \"blackPawn\":\n            current = location + 8;\n            if (current < 56 && !this.state.boardState[current].includes(\"white\") && !this.state.boardState[current].includes(\"black\"))  {\n              possibleMoves.push(current);\n              if (Math.floor(location * .125) === 1 && !this.state.boardState[current + 8].includes(\"white\") && !this.state.boardState[current + 8].includes(\"black\"))  {\n                possibleMoves.push(current + 8);\n              }\n            }\n\n            for (let i = 2; i < 4; i++) {\n              current = location + diagonalPieceMovements[i];\n              let counter = mod;\n              diagonalPieceMovements[i] % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter <= 8 && (this.state.boardState[current].includes(\"white\") || current === this.state.possibleEnPassantSquare) && Math.floor((location + 8) * .125) === Math.floor(current * .125)) {\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n        case \"whiteKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"white\")) continue;\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n        case \"blackKnight\":\n            for (let movement of knightPieceMovements) {\n              current = movement + location\n              if (current < 64 && current > 0) {\n                let spacesAway = 0;\n                if (movement === -15 || movement === 17) spacesAway = 1;\n                if (movement === -17 || movement === 15) spacesAway = -1;\n                if (movement === -6 || movement === 10) spacesAway = 2;\n                if (movement === -10 || movement === 6) spacesAway = -2;\n                if (Math.floor(location * .125) !== Math.floor((location + spacesAway) * .125)) continue;\n                if (this.state.boardState[current].includes(\"black\")) continue;\n                possibleMoves.push(current);\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n        case \"whiteBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n\n        case \"blackBishop\":\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n\n        case \"whiteRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n\n        case \"blackRook\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (current < 0 || current > 63) continue;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n          break;\n        case \"whiteQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"white\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"black\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n        case \"blackQueen\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              while (current < 64 && current > 0)  {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += verticalPieceMovements[movement];;\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\"))  {\n                while (Math.floor(current * .125) === Math.floor(location * .125))  {\n                  possibleMoves.push(current);\n                  current += movement;\n                  if (current > 63 || current < 0)  break;\n                  if (this.state.boardState[current].includes(\"black\"))  break;\n                  if (this.state.boardState[current - movement].includes(\"white\"))  break;\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              while (current < 64 && current > 0 && counter >= 0 && counter < 8) {\n                if (this.state.boardState[current].includes(\"black\"))  break;\n                possibleMoves.push(current);\n                if (this.state.boardState[current].includes(\"white\"))  break;\n                current += diagonalPieceMovements[movement];\n                movement % 2 === 0 ? counter-- : counter++;\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n        case \"whiteKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"white\"))  {\n                if (!this.state.blackControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"white\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                if (!this.state.blackControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"white\")) {\n                if (!this.state.blackControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n        case \"blackKing\":\n            for (let movement in verticalPieceMovements) {\n              let current = location + verticalPieceMovements[movement];\n              if (current < 64 && current > 0 && !this.state.boardState[current].includes(\"black\"))  {\n                if (!this.state.whiteControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement of horizontalPieceMovements)  {\n              let current = location + movement;\n              if (!this.state.boardState[current].includes(\"black\") && Math.floor(current * .125) === Math.floor(location * .125))  {\n                if (!this.state.whiteControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            for (let movement in diagonalPieceMovements) {\n              let current = location + diagonalPieceMovements[movement];\n              let counter = mod;\n              movement % 2 === 0 ? counter-- : counter++;\n              if (current < 64 && current > 0 && counter >= 0 && counter < 8 && !this.state.boardState[current].includes(\"black\")) {\n                if (!this.state.whiteControlledSquares.includes(current)) {\n                  possibleMoves.push(current);\n                }\n              }\n            }\n\n            possibleMoves =  possibleMoves.filter((value) => this.checkIllegalMove(value, location))\n        break;\n        default:\n      }\n      return possibleMoves\n  }\n\n  checkMateCheck = () => {\n    if (this.state.checked === false)  {\n      let whiteKingPosition = -1\n      let blackKingPosition = -1\n      let possibleWhiteMoves = []\n      let possibleBlackMoves = []\n      for (let location = 0; location < 64; location++) {\n        if (this.state.boardState[location].length !== 0) {\n          let array = this.checkmateHelper(location)\n          console.log(array)\n          if (this.state.boardState[location].includes(\"white\"))  {\n            possibleWhiteMoves = [...possibleWhiteMoves, ...this.checkmateHelper(location)]\n          } else {\n            possibleBlackMoves = [...possibleBlackMoves, ...this.checkmateHelper(location)]\n          }\n          if (this.state.boardState[location] === \"whiteKing\") whiteKingPosition = location\n          if (this.state.boardState[location] === \"blackKing\") blackKingPosition = location\n        }\n      }\n      console.log(\"White's Moves\", this.state.playerTurn, possibleWhiteMoves)\n      console.log(\"Black's Moves\", this.state.playerTurn, possibleBlackMoves)\n\n      if (this.state.playerTurn === \"White\" && possibleBlackMoves.includes(whiteKingPosition) && possibleWhiteMoves.length === 0) {\n        console.log(\"checkmate\")\n        this.setState({\n          moveRecord: [...this.state.moveRecord.slice(0,this.state.moveRecord.length - 1), this.state.moveRecord[this.state.moveRecord.length - 1] + '#'],\n          checked: true\n        })\n      } else if (this.state.playerTurn === \"White\" && possibleBlackMoves.includes(whiteKingPosition)) {\n        this.setState({\n          moveRecord: [...this.state.moveRecord.slice(0,this.state.moveRecord.length - 1), this.state.moveRecord[this.state.moveRecord.length - 1] + '+'],\n          checked: true\n        })\n      } else if (this.state.playerTurn === \"Black\" && possibleWhiteMoves.includes(blackKingPosition) && possibleBlackMoves.length === 0) {\n        this.setState({\n          moveRecord: [...this.state.moveRecord.slice(0,this.state.moveRecord.length - 1), this.state.moveRecord[this.state.moveRecord.length - 1] + '#'],\n          checked: true\n        })\n      } else if (this.state.playerTurn === \"Black\" && possibleWhiteMoves.includes(blackKingPosition)) {\n        this.setState({\n          moveRecord: [...this.state.moveRecord.slice(0,this.state.moveRecord.length - 1), this.state.moveRecord[this.state.moveRecord.length - 1] + '+'],\n          checked: true\n        })\n      } else {\n        this.setState({\n          checked: true\n        })\n      }\n    }\n  }\n\n\n  render(){\n    let board = this.state.colorGrid.map((value,index)=> {\n      return (\n        <Square\n          index = { index }\n          value = { value }\n          key = { index }\n          colorGrid = { this.state.colorGrid }\n          boardState = { this.state.boardState }\n          possibleMoves = { this.state.possibleMoves }\n          moveSelected = { this.state.moveSelected }\n          startingPosition = { this.state.startingPosition }\n          findSquares = { this.findSquares }\n          clearMove = { this.clearMove }\n          movePiece = { this.movePiece }\n        />\n      )\n    })\n    let moveList = this.state.moveRecord.map((value) => {\n      return (\n        <div className=\"column notationMoves\">{ value }</div>\n      )\n    })\n    return(\n      <React.Fragment>\n        { this.castlingConditions() }\n        { this.checkMateCheck() }\n        <div className=\"row\">\n          <div className=\"column left\">\n          <p></p>\n          </div>\n          <div className=\"column middle\">\n            <div className=\"row\">\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { whitePawn } alt=\"White Pawn\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { blackKnight } alt=\"black Knight\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { whiteKing } alt=\"White King\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <h1>CHESS</h1>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { blackQueen } alt=\"Black Queen\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { whiteRook } alt=\"White Rook\"/>\n              </div>\n              <div className=\"headerColumn\">\n                <img id = \"chessHeaderImage\" src = { blackBishop } alt=\"Black Bishop\"/>\n              </div>\n            </div>\n          </div>\n          <div className=\"column right\">\n          <p></p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"column\">\n            <div id = \"boardBackground\">\n              <div id = \"boardHolder\">\n                <div id = \"boardHolderTwo\">\n                  { board }\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"column moves\">\n            <div id= \"moveBackground\">\n              <h2>{`${this.state.playerTurn} to move.`}</h2>\n              <div className=\"row\">\n                { moveList }\n              </div>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}